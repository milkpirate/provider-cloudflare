// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DevicePostureRuleInitParameters struct {

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Expire posture results after the specified amount of time. Must be in the format 1h or 30m. Valid units are h and m.
	// Expire posture results after the specified amount of time. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// (Block List) Required for all rule types except warp, gateway, and tanium. (see below for nested schema)
	// Required for all rule types except `warp`, `gateway`, and `tanium`.
	Input []InputInitParameters `json:"input,omitempty" tf:"input,omitempty"`

	// (Block List) The conditions that the client must match to run the rule. (see below for nested schema)
	// The conditions that the client must match to run the rule.
	Match []MatchInitParameters `json:"match,omitempty" tf:"match,omitempty"`

	// (String) Name of the device posture rule.
	// Name of the device posture rule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Tells the client when to run the device posture check. Must be in the format 1h or 30m. Valid units are h and m.
	// Tells the client when to run the device posture check. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// (String) The device posture rule type. Available values: serial_number, file, application, gateway, warp, domain_joined, os_version, disk_encryption, firewall, client_certificate, workspace_one, unique_client_id, crowdstrike_s2s, sentinelone, kolide, tanium_s2s, intune, sentinelone_s2s.
	// The device posture rule type. Available values: `serial_number`, `file`, `application`, `gateway`, `warp`, `domain_joined`, `os_version`, `disk_encryption`, `firewall`, `client_certificate`, `workspace_one`, `unique_client_id`, `crowdstrike_s2s`, `sentinelone`, `kolide`, `tanium_s2s`, `intune`, `sentinelone_s2s`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DevicePostureRuleObservation struct {

	// (String) The account identifier to target for the resource.
	// The account identifier to target for the resource.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Expire posture results after the specified amount of time. Must be in the format 1h or 30m. Valid units are h and m.
	// Expire posture results after the specified amount of time. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List) Required for all rule types except warp, gateway, and tanium. (see below for nested schema)
	// Required for all rule types except `warp`, `gateway`, and `tanium`.
	Input []InputObservation `json:"input,omitempty" tf:"input,omitempty"`

	// (Block List) The conditions that the client must match to run the rule. (see below for nested schema)
	// The conditions that the client must match to run the rule.
	Match []MatchObservation `json:"match,omitempty" tf:"match,omitempty"`

	// (String) Name of the device posture rule.
	// Name of the device posture rule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Tells the client when to run the device posture check. Must be in the format 1h or 30m. Valid units are h and m.
	// Tells the client when to run the device posture check. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// (String) The device posture rule type. Available values: serial_number, file, application, gateway, warp, domain_joined, os_version, disk_encryption, firewall, client_certificate, workspace_one, unique_client_id, crowdstrike_s2s, sentinelone, kolide, tanium_s2s, intune, sentinelone_s2s.
	// The device posture rule type. Available values: `serial_number`, `file`, `application`, `gateway`, `warp`, `domain_joined`, `os_version`, `disk_encryption`, `firewall`, `client_certificate`, `workspace_one`, `unique_client_id`, `crowdstrike_s2s`, `sentinelone`, `kolide`, `tanium_s2s`, `intune`, `sentinelone_s2s`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DevicePostureRuleParameters struct {

	// (String) The account identifier to target for the resource.
	// The account identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/milkpirate/provider-cloudflare/apis/account/v1alpha1.Account
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// (String)
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Expire posture results after the specified amount of time. Must be in the format 1h or 30m. Valid units are h and m.
	// Expire posture results after the specified amount of time. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	// +kubebuilder:validation:Optional
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// (Block List) Required for all rule types except warp, gateway, and tanium. (see below for nested schema)
	// Required for all rule types except `warp`, `gateway`, and `tanium`.
	// +kubebuilder:validation:Optional
	Input []InputParameters `json:"input,omitempty" tf:"input,omitempty"`

	// (Block List) The conditions that the client must match to run the rule. (see below for nested schema)
	// The conditions that the client must match to run the rule.
	// +kubebuilder:validation:Optional
	Match []MatchParameters `json:"match,omitempty" tf:"match,omitempty"`

	// (String) Name of the device posture rule.
	// Name of the device posture rule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Tells the client when to run the device posture check. Must be in the format 1h or 30m. Valid units are h and m.
	// Tells the client when to run the device posture check. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	// +kubebuilder:validation:Optional
	Schedule *string `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// (String) The device posture rule type. Available values: serial_number, file, application, gateway, warp, domain_joined, os_version, disk_encryption, firewall, client_certificate, workspace_one, unique_client_id, crowdstrike_s2s, sentinelone, kolide, tanium_s2s, intune, sentinelone_s2s.
	// The device posture rule type. Available values: `serial_number`, `file`, `application`, `gateway`, `warp`, `domain_joined`, `os_version`, `disk_encryption`, `firewall`, `client_certificate`, `workspace_one`, `unique_client_id`, `crowdstrike_s2s`, `sentinelone`, `kolide`, `tanium_s2s`, `intune`, `sentinelone_s2s`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type InputInitParameters struct {

	// (Number) The number of active threats from SentinelOne.
	// The number of active threats from SentinelOne.
	ActiveThreats *float64 `json:"activeThreats,omitempty" tf:"active_threats,omitempty"`

	// (String) The UUID of a Cloudflare managed certificate.
	// The UUID of a Cloudflare managed certificate.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// (Set of String) Specific volume(s) to check for encryption.
	// Specific volume(s) to check for encryption.
	CheckDisks []*string `json:"checkDisks,omitempty" tf:"check_disks,omitempty"`

	// (String) The common name for a certificate.
	// The common name for a certificate.
	Cn *string `json:"cn,omitempty" tf:"cn,omitempty"`

	// (String) The workspace one device compliance status. Available values: compliant, noncompliant.
	// The workspace one device compliance status. Available values: `compliant`, `noncompliant`.
	ComplianceStatus *string `json:"complianceStatus,omitempty" tf:"compliance_status,omitempty"`

	// (String) The workspace one connection id.
	// The workspace one connection id.
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// (String) The count comparison operator for kolide. Available values: >, >=, <, <=, ==.
	// The count comparison operator for kolide. Available values: `>`, `>=`, `<`, `<=`, `==`.
	CountOperator *string `json:"countOperator,omitempty" tf:"count_operator,omitempty"`

	// (String) The domain that the client must join.
	// The domain that the client must join.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) The datetime a device last seen in RFC 3339 format from Tanium.
	// The datetime a device last seen in RFC 3339 format from Tanium.
	EidLastSeen *string `json:"eidLastSeen,omitempty" tf:"eid_last_seen,omitempty"`

	// (Boolean) True if the firewall must be enabled.
	// True if the firewall must be enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Checks if the file should exist.
	// Checks if the file should exist.
	Exists *bool `json:"exists,omitempty" tf:"exists,omitempty"`

	// (String) The ID of this resource.
	// The Teams List id. Required for `serial_number` and `unique_client_id` rule types.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) True if SentinelOne device is infected.
	// True if SentinelOne device is infected.
	Infected *bool `json:"infected,omitempty" tf:"infected,omitempty"`

	// (Boolean) True if SentinelOne device is active.
	// True if SentinelOne device is active.
	IsActive *bool `json:"isActive,omitempty" tf:"is_active,omitempty"`

	// (String) The number of issues for kolide.
	// The number of issues for kolide.
	IssueCount *string `json:"issueCount,omitempty" tf:"issue_count,omitempty"`

	// (String) The duration of time that the host was last seen from Crowdstrike. Must be in the format 1h or 30m. Valid units are d, h and m.
	// The duration of time that the host was last seen from Crowdstrike. Must be in the format `1h` or `30m`. Valid units are `d`, `h` and `m`.
	LastSeen *string `json:"lastSeen,omitempty" tf:"last_seen,omitempty"`

	// (String) The network status from SentinelOne. Available values: connected, disconnected, disconnecting, connecting.
	// The network status from SentinelOne. Available values: `connected`, `disconnected`, `disconnecting`, `connecting`.
	NetworkStatus *string `json:"networkStatus,omitempty" tf:"network_status,omitempty"`

	// (String) The version comparison operator. Available values: >, >=, <, <=, ==.
	// The version comparison operator. Available values: `>`, `>=`, `<`, `<=`, `==`.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) OS signal score from Crowdstrike. Value must be between 1 and 100.
	// OS signal score from Crowdstrike. Value must be between 1 and 100.
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// (String) The operating system excluding version information.
	// The operating system excluding version information.
	OsDistroName *string `json:"osDistroName,omitempty" tf:"os_distro_name,omitempty"`

	// (String) The operating system version excluding OS name information or release name.
	// The operating system version excluding OS name information or release name.
	OsDistroRevision *string `json:"osDistroRevision,omitempty" tf:"os_distro_revision,omitempty"`

	// (String) Overall ZTA score from Crowdstrike. Value must be between 1 and 100.
	// Overall ZTA score from Crowdstrike. Value must be between 1 and 100.
	Overall *string `json:"overall,omitempty" tf:"overall,omitempty"`

	// (String) The path to the file.
	// The path to the file.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Boolean) True if all drives must be encrypted.
	// True if all drives must be encrypted.
	RequireAll *bool `json:"requireAll,omitempty" tf:"require_all,omitempty"`

	// (String) The risk level from Tanium. Available values: low, medium, high, critical.
	// The risk level from Tanium. Available values: `low`, `medium`, `high`, `critical`.
	RiskLevel *string `json:"riskLevel,omitempty" tf:"risk_level,omitempty"`

	// (Boolean) Checks if the application should be running.
	// Checks if the application should be running.
	Running *bool `json:"running,omitempty" tf:"running,omitempty"`

	// (String) Sensor signal score from Crowdstrike. Value must be between 1 and 100.
	// Sensor signal score from Crowdstrike. Value must be between 1 and 100.
	SensorConfig *string `json:"sensorConfig,omitempty" tf:"sensor_config,omitempty"`

	// (String) The sha256 hash of the file.
	// The sha256 hash of the file.
	Sha256 *string `json:"sha256,omitempty" tf:"sha256,omitempty"`

	// (String) The host’s current online status from Crowdstrike. Available values: online, offline, unknown.
	// The host’s current online status from Crowdstrike. Available values: `online`, `offline`, `unknown`.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) The thumbprint of the file certificate.
	// The thumbprint of the file certificate.
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`

	// (Number) The total score from Tanium.
	// The total score from Tanium.
	TotalScore *float64 `json:"totalScore,omitempty" tf:"total_score,omitempty"`

	// (String) The operating system semantic version.
	// The operating system semantic version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// (String) The version comparison operator for crowdstrike. Available values: >, >=, <, <=, ==.
	// The version comparison operator for crowdstrike. Available values: `>`, `>=`, `<`, `<=`, `==`.
	VersionOperator *string `json:"versionOperator,omitempty" tf:"version_operator,omitempty"`
}

type InputObservation struct {

	// (Number) The number of active threats from SentinelOne.
	// The number of active threats from SentinelOne.
	ActiveThreats *float64 `json:"activeThreats,omitempty" tf:"active_threats,omitempty"`

	// (String) The UUID of a Cloudflare managed certificate.
	// The UUID of a Cloudflare managed certificate.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// (Set of String) Specific volume(s) to check for encryption.
	// Specific volume(s) to check for encryption.
	CheckDisks []*string `json:"checkDisks,omitempty" tf:"check_disks,omitempty"`

	// (String) The common name for a certificate.
	// The common name for a certificate.
	Cn *string `json:"cn,omitempty" tf:"cn,omitempty"`

	// (String) The workspace one device compliance status. Available values: compliant, noncompliant.
	// The workspace one device compliance status. Available values: `compliant`, `noncompliant`.
	ComplianceStatus *string `json:"complianceStatus,omitempty" tf:"compliance_status,omitempty"`

	// (String) The workspace one connection id.
	// The workspace one connection id.
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// (String) The count comparison operator for kolide. Available values: >, >=, <, <=, ==.
	// The count comparison operator for kolide. Available values: `>`, `>=`, `<`, `<=`, `==`.
	CountOperator *string `json:"countOperator,omitempty" tf:"count_operator,omitempty"`

	// (String) The domain that the client must join.
	// The domain that the client must join.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) The datetime a device last seen in RFC 3339 format from Tanium.
	// The datetime a device last seen in RFC 3339 format from Tanium.
	EidLastSeen *string `json:"eidLastSeen,omitempty" tf:"eid_last_seen,omitempty"`

	// (Boolean) True if the firewall must be enabled.
	// True if the firewall must be enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Checks if the file should exist.
	// Checks if the file should exist.
	Exists *bool `json:"exists,omitempty" tf:"exists,omitempty"`

	// (String) The ID of this resource.
	// The Teams List id. Required for `serial_number` and `unique_client_id` rule types.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) True if SentinelOne device is infected.
	// True if SentinelOne device is infected.
	Infected *bool `json:"infected,omitempty" tf:"infected,omitempty"`

	// (Boolean) True if SentinelOne device is active.
	// True if SentinelOne device is active.
	IsActive *bool `json:"isActive,omitempty" tf:"is_active,omitempty"`

	// (String) The number of issues for kolide.
	// The number of issues for kolide.
	IssueCount *string `json:"issueCount,omitempty" tf:"issue_count,omitempty"`

	// (String) The duration of time that the host was last seen from Crowdstrike. Must be in the format 1h or 30m. Valid units are d, h and m.
	// The duration of time that the host was last seen from Crowdstrike. Must be in the format `1h` or `30m`. Valid units are `d`, `h` and `m`.
	LastSeen *string `json:"lastSeen,omitempty" tf:"last_seen,omitempty"`

	// (String) The network status from SentinelOne. Available values: connected, disconnected, disconnecting, connecting.
	// The network status from SentinelOne. Available values: `connected`, `disconnected`, `disconnecting`, `connecting`.
	NetworkStatus *string `json:"networkStatus,omitempty" tf:"network_status,omitempty"`

	// (String) The version comparison operator. Available values: >, >=, <, <=, ==.
	// The version comparison operator. Available values: `>`, `>=`, `<`, `<=`, `==`.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) OS signal score from Crowdstrike. Value must be between 1 and 100.
	// OS signal score from Crowdstrike. Value must be between 1 and 100.
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// (String) The operating system excluding version information.
	// The operating system excluding version information.
	OsDistroName *string `json:"osDistroName,omitempty" tf:"os_distro_name,omitempty"`

	// (String) The operating system version excluding OS name information or release name.
	// The operating system version excluding OS name information or release name.
	OsDistroRevision *string `json:"osDistroRevision,omitempty" tf:"os_distro_revision,omitempty"`

	// (String) Overall ZTA score from Crowdstrike. Value must be between 1 and 100.
	// Overall ZTA score from Crowdstrike. Value must be between 1 and 100.
	Overall *string `json:"overall,omitempty" tf:"overall,omitempty"`

	// (String) The path to the file.
	// The path to the file.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Boolean) True if all drives must be encrypted.
	// True if all drives must be encrypted.
	RequireAll *bool `json:"requireAll,omitempty" tf:"require_all,omitempty"`

	// (String) The risk level from Tanium. Available values: low, medium, high, critical.
	// The risk level from Tanium. Available values: `low`, `medium`, `high`, `critical`.
	RiskLevel *string `json:"riskLevel,omitempty" tf:"risk_level,omitempty"`

	// (Boolean) Checks if the application should be running.
	// Checks if the application should be running.
	Running *bool `json:"running,omitempty" tf:"running,omitempty"`

	// (String) Sensor signal score from Crowdstrike. Value must be between 1 and 100.
	// Sensor signal score from Crowdstrike. Value must be between 1 and 100.
	SensorConfig *string `json:"sensorConfig,omitempty" tf:"sensor_config,omitempty"`

	// (String) The sha256 hash of the file.
	// The sha256 hash of the file.
	Sha256 *string `json:"sha256,omitempty" tf:"sha256,omitempty"`

	// (String) The host’s current online status from Crowdstrike. Available values: online, offline, unknown.
	// The host’s current online status from Crowdstrike. Available values: `online`, `offline`, `unknown`.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) The thumbprint of the file certificate.
	// The thumbprint of the file certificate.
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`

	// (Number) The total score from Tanium.
	// The total score from Tanium.
	TotalScore *float64 `json:"totalScore,omitempty" tf:"total_score,omitempty"`

	// (String) The operating system semantic version.
	// The operating system semantic version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// (String) The version comparison operator for crowdstrike. Available values: >, >=, <, <=, ==.
	// The version comparison operator for crowdstrike. Available values: `>`, `>=`, `<`, `<=`, `==`.
	VersionOperator *string `json:"versionOperator,omitempty" tf:"version_operator,omitempty"`
}

type InputParameters struct {

	// (Number) The number of active threats from SentinelOne.
	// The number of active threats from SentinelOne.
	// +kubebuilder:validation:Optional
	ActiveThreats *float64 `json:"activeThreats,omitempty" tf:"active_threats,omitempty"`

	// (String) The UUID of a Cloudflare managed certificate.
	// The UUID of a Cloudflare managed certificate.
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// (Set of String) Specific volume(s) to check for encryption.
	// Specific volume(s) to check for encryption.
	// +kubebuilder:validation:Optional
	CheckDisks []*string `json:"checkDisks,omitempty" tf:"check_disks,omitempty"`

	// (String) The common name for a certificate.
	// The common name for a certificate.
	// +kubebuilder:validation:Optional
	Cn *string `json:"cn,omitempty" tf:"cn,omitempty"`

	// (String) The workspace one device compliance status. Available values: compliant, noncompliant.
	// The workspace one device compliance status. Available values: `compliant`, `noncompliant`.
	// +kubebuilder:validation:Optional
	ComplianceStatus *string `json:"complianceStatus,omitempty" tf:"compliance_status,omitempty"`

	// (String) The workspace one connection id.
	// The workspace one connection id.
	// +kubebuilder:validation:Optional
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// (String) The count comparison operator for kolide. Available values: >, >=, <, <=, ==.
	// The count comparison operator for kolide. Available values: `>`, `>=`, `<`, `<=`, `==`.
	// +kubebuilder:validation:Optional
	CountOperator *string `json:"countOperator,omitempty" tf:"count_operator,omitempty"`

	// (String) The domain that the client must join.
	// The domain that the client must join.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) The datetime a device last seen in RFC 3339 format from Tanium.
	// The datetime a device last seen in RFC 3339 format from Tanium.
	// +kubebuilder:validation:Optional
	EidLastSeen *string `json:"eidLastSeen,omitempty" tf:"eid_last_seen,omitempty"`

	// (Boolean) True if the firewall must be enabled.
	// True if the firewall must be enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Checks if the file should exist.
	// Checks if the file should exist.
	// +kubebuilder:validation:Optional
	Exists *bool `json:"exists,omitempty" tf:"exists,omitempty"`

	// (String) The ID of this resource.
	// The Teams List id. Required for `serial_number` and `unique_client_id` rule types.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) True if SentinelOne device is infected.
	// True if SentinelOne device is infected.
	// +kubebuilder:validation:Optional
	Infected *bool `json:"infected,omitempty" tf:"infected,omitempty"`

	// (Boolean) True if SentinelOne device is active.
	// True if SentinelOne device is active.
	// +kubebuilder:validation:Optional
	IsActive *bool `json:"isActive,omitempty" tf:"is_active,omitempty"`

	// (String) The number of issues for kolide.
	// The number of issues for kolide.
	// +kubebuilder:validation:Optional
	IssueCount *string `json:"issueCount,omitempty" tf:"issue_count,omitempty"`

	// (String) The duration of time that the host was last seen from Crowdstrike. Must be in the format 1h or 30m. Valid units are d, h and m.
	// The duration of time that the host was last seen from Crowdstrike. Must be in the format `1h` or `30m`. Valid units are `d`, `h` and `m`.
	// +kubebuilder:validation:Optional
	LastSeen *string `json:"lastSeen,omitempty" tf:"last_seen,omitempty"`

	// (String) The network status from SentinelOne. Available values: connected, disconnected, disconnecting, connecting.
	// The network status from SentinelOne. Available values: `connected`, `disconnected`, `disconnecting`, `connecting`.
	// +kubebuilder:validation:Optional
	NetworkStatus *string `json:"networkStatus,omitempty" tf:"network_status,omitempty"`

	// (String) The version comparison operator. Available values: >, >=, <, <=, ==.
	// The version comparison operator. Available values: `>`, `>=`, `<`, `<=`, `==`.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) OS signal score from Crowdstrike. Value must be between 1 and 100.
	// OS signal score from Crowdstrike. Value must be between 1 and 100.
	// +kubebuilder:validation:Optional
	Os *string `json:"os,omitempty" tf:"os,omitempty"`

	// (String) The operating system excluding version information.
	// The operating system excluding version information.
	// +kubebuilder:validation:Optional
	OsDistroName *string `json:"osDistroName,omitempty" tf:"os_distro_name,omitempty"`

	// (String) The operating system version excluding OS name information or release name.
	// The operating system version excluding OS name information or release name.
	// +kubebuilder:validation:Optional
	OsDistroRevision *string `json:"osDistroRevision,omitempty" tf:"os_distro_revision,omitempty"`

	// (String) Overall ZTA score from Crowdstrike. Value must be between 1 and 100.
	// Overall ZTA score from Crowdstrike. Value must be between 1 and 100.
	// +kubebuilder:validation:Optional
	Overall *string `json:"overall,omitempty" tf:"overall,omitempty"`

	// (String) The path to the file.
	// The path to the file.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Boolean) True if all drives must be encrypted.
	// True if all drives must be encrypted.
	// +kubebuilder:validation:Optional
	RequireAll *bool `json:"requireAll,omitempty" tf:"require_all,omitempty"`

	// (String) The risk level from Tanium. Available values: low, medium, high, critical.
	// The risk level from Tanium. Available values: `low`, `medium`, `high`, `critical`.
	// +kubebuilder:validation:Optional
	RiskLevel *string `json:"riskLevel,omitempty" tf:"risk_level,omitempty"`

	// (Boolean) Checks if the application should be running.
	// Checks if the application should be running.
	// +kubebuilder:validation:Optional
	Running *bool `json:"running,omitempty" tf:"running,omitempty"`

	// (String) Sensor signal score from Crowdstrike. Value must be between 1 and 100.
	// Sensor signal score from Crowdstrike. Value must be between 1 and 100.
	// +kubebuilder:validation:Optional
	SensorConfig *string `json:"sensorConfig,omitempty" tf:"sensor_config,omitempty"`

	// (String) The sha256 hash of the file.
	// The sha256 hash of the file.
	// +kubebuilder:validation:Optional
	Sha256 *string `json:"sha256,omitempty" tf:"sha256,omitempty"`

	// (String) The host’s current online status from Crowdstrike. Available values: online, offline, unknown.
	// The host’s current online status from Crowdstrike. Available values: `online`, `offline`, `unknown`.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) The thumbprint of the file certificate.
	// The thumbprint of the file certificate.
	// +kubebuilder:validation:Optional
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`

	// (Number) The total score from Tanium.
	// The total score from Tanium.
	// +kubebuilder:validation:Optional
	TotalScore *float64 `json:"totalScore,omitempty" tf:"total_score,omitempty"`

	// (String) The operating system semantic version.
	// The operating system semantic version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// (String) The version comparison operator for crowdstrike. Available values: >, >=, <, <=, ==.
	// The version comparison operator for crowdstrike. Available values: `>`, `>=`, `<`, `<=`, `==`.
	// +kubebuilder:validation:Optional
	VersionOperator *string `json:"versionOperator,omitempty" tf:"version_operator,omitempty"`
}

type MatchInitParameters struct {

	// (String) The platform of the device. Available values: windows, mac, linux, android, ios, chromeos.
	// The platform of the device. Available values: `windows`, `mac`, `linux`, `android`, `ios`, `chromeos`.
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`
}

type MatchObservation struct {

	// (String) The platform of the device. Available values: windows, mac, linux, android, ios, chromeos.
	// The platform of the device. Available values: `windows`, `mac`, `linux`, `android`, `ios`, `chromeos`.
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`
}

type MatchParameters struct {

	// (String) The platform of the device. Available values: windows, mac, linux, android, ios, chromeos.
	// The platform of the device. Available values: `windows`, `mac`, `linux`, `android`, `ios`, `chromeos`.
	// +kubebuilder:validation:Optional
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`
}

// DevicePostureRuleSpec defines the desired state of DevicePostureRule
type DevicePostureRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DevicePostureRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DevicePostureRuleInitParameters `json:"initProvider,omitempty"`
}

// DevicePostureRuleStatus defines the observed state of DevicePostureRule.
type DevicePostureRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DevicePostureRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevicePostureRule is the Schema for the DevicePostureRules API. Provides a Cloudflare Device Posture Rule resource. Device posture rules configure security policies for device posture checks.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type DevicePostureRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   DevicePostureRuleSpec   `json:"spec"`
	Status DevicePostureRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevicePostureRuleList contains a list of DevicePostureRules
type DevicePostureRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevicePostureRule `json:"items"`
}

// Repository type metadata.
var (
	DevicePostureRule_Kind             = "DevicePostureRule"
	DevicePostureRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DevicePostureRule_Kind}.String()
	DevicePostureRule_KindAPIVersion   = DevicePostureRule_Kind + "." + CRDGroupVersion.String()
	DevicePostureRule_GroupVersionKind = CRDGroupVersion.WithKind(DevicePostureRule_Kind)
)

func init() {
	SchemeBuilder.Register(&DevicePostureRule{}, &DevicePostureRuleList{})
}
