// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigInitParameters struct {

	// (String)
	APIToken *string `json:"apiToken,omitempty" tf:"api_token,omitempty"`

	// (String)
	AppsDomain *string `json:"appsDomain,omitempty" tf:"apps_domain,omitempty"`

	// (List of String)
	Attributes []*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// (String)
	AuthURL *string `json:"authUrl,omitempty" tf:"auth_url,omitempty"`

	// (String)
	AuthorizationServerID *string `json:"authorizationServerId,omitempty" tf:"authorization_server_id,omitempty"`

	// (String)
	CentrifyAccount *string `json:"centrifyAccount,omitempty" tf:"centrify_account,omitempty"`

	// (String)
	CentrifyAppID *string `json:"centrifyAppId,omitempty" tf:"centrify_app_id,omitempty"`

	// (String)
	CertsURL *string `json:"certsUrl,omitempty" tf:"certs_url,omitempty"`

	// (List of String)
	Claims []*string `json:"claims,omitempty" tf:"claims,omitempty"`

	// (String)
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String)
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// (Boolean)
	ConditionalAccessEnabled *bool `json:"conditionalAccessEnabled,omitempty" tf:"conditional_access_enabled,omitempty"`

	// (String)
	DirectoryID *string `json:"directoryId,omitempty" tf:"directory_id,omitempty"`

	// (String)
	EmailAttributeName *string `json:"emailAttributeName,omitempty" tf:"email_attribute_name,omitempty"`

	// (String)
	EmailClaimName *string `json:"emailClaimName,omitempty" tf:"email_claim_name,omitempty"`

	// (String)
	IdpPublicCert *string `json:"idpPublicCert,omitempty" tf:"idp_public_cert,omitempty"`

	// (String)
	IssuerURL *string `json:"issuerUrl,omitempty" tf:"issuer_url,omitempty"`

	// (String)
	OktaAccount *string `json:"oktaAccount,omitempty" tf:"okta_account,omitempty"`

	// (String)
	OneloginAccount *string `json:"oneloginAccount,omitempty" tf:"onelogin_account,omitempty"`

	// (String)
	PingEnvID *string `json:"pingEnvId,omitempty" tf:"ping_env_id,omitempty"`

	// (Boolean)
	PkceEnabled *bool `json:"pkceEnabled,omitempty" tf:"pkce_enabled,omitempty"`

	// (List of String)
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (Boolean)
	SignRequest *bool `json:"signRequest,omitempty" tf:"sign_request,omitempty"`

	// (String)
	SsoTargetURL *string `json:"ssoTargetUrl,omitempty" tf:"sso_target_url,omitempty"`

	// (Boolean)
	SupportGroups *bool `json:"supportGroups,omitempty" tf:"support_groups,omitempty"`

	// (String)
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`
}

type ConfigObservation struct {

	// (String)
	APIToken *string `json:"apiToken,omitempty" tf:"api_token,omitempty"`

	// (String)
	AppsDomain *string `json:"appsDomain,omitempty" tf:"apps_domain,omitempty"`

	// (List of String)
	Attributes []*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// (String)
	AuthURL *string `json:"authUrl,omitempty" tf:"auth_url,omitempty"`

	// (String)
	AuthorizationServerID *string `json:"authorizationServerId,omitempty" tf:"authorization_server_id,omitempty"`

	// (String)
	CentrifyAccount *string `json:"centrifyAccount,omitempty" tf:"centrify_account,omitempty"`

	// (String)
	CentrifyAppID *string `json:"centrifyAppId,omitempty" tf:"centrify_app_id,omitempty"`

	// (String)
	CertsURL *string `json:"certsUrl,omitempty" tf:"certs_url,omitempty"`

	// (List of String)
	Claims []*string `json:"claims,omitempty" tf:"claims,omitempty"`

	// (String)
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String)
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// (Boolean)
	ConditionalAccessEnabled *bool `json:"conditionalAccessEnabled,omitempty" tf:"conditional_access_enabled,omitempty"`

	// (String)
	DirectoryID *string `json:"directoryId,omitempty" tf:"directory_id,omitempty"`

	// (String)
	EmailAttributeName *string `json:"emailAttributeName,omitempty" tf:"email_attribute_name,omitempty"`

	// (String)
	EmailClaimName *string `json:"emailClaimName,omitempty" tf:"email_claim_name,omitempty"`

	// (String)
	IdpPublicCert *string `json:"idpPublicCert,omitempty" tf:"idp_public_cert,omitempty"`

	// (String)
	IssuerURL *string `json:"issuerUrl,omitempty" tf:"issuer_url,omitempty"`

	// (String)
	OktaAccount *string `json:"oktaAccount,omitempty" tf:"okta_account,omitempty"`

	// (String)
	OneloginAccount *string `json:"oneloginAccount,omitempty" tf:"onelogin_account,omitempty"`

	// (String)
	PingEnvID *string `json:"pingEnvId,omitempty" tf:"ping_env_id,omitempty"`

	// (Boolean)
	PkceEnabled *bool `json:"pkceEnabled,omitempty" tf:"pkce_enabled,omitempty"`

	// (String)
	RedirectURL *string `json:"redirectUrl,omitempty" tf:"redirect_url,omitempty"`

	// (List of String)
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (Boolean)
	SignRequest *bool `json:"signRequest,omitempty" tf:"sign_request,omitempty"`

	// (String)
	SsoTargetURL *string `json:"ssoTargetUrl,omitempty" tf:"sso_target_url,omitempty"`

	// (Boolean)
	SupportGroups *bool `json:"supportGroups,omitempty" tf:"support_groups,omitempty"`

	// (String)
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`
}

type ConfigParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	APIToken *string `json:"apiToken,omitempty" tf:"api_token,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	AppsDomain *string `json:"appsDomain,omitempty" tf:"apps_domain,omitempty"`

	// (List of String)
	// +kubebuilder:validation:Optional
	Attributes []*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	AuthURL *string `json:"authUrl,omitempty" tf:"auth_url,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	AuthorizationServerID *string `json:"authorizationServerId,omitempty" tf:"authorization_server_id,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	CentrifyAccount *string `json:"centrifyAccount,omitempty" tf:"centrify_account,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	CentrifyAppID *string `json:"centrifyAppId,omitempty" tf:"centrify_app_id,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	CertsURL *string `json:"certsUrl,omitempty" tf:"certs_url,omitempty"`

	// (List of String)
	// +kubebuilder:validation:Optional
	Claims []*string `json:"claims,omitempty" tf:"claims,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	ConditionalAccessEnabled *bool `json:"conditionalAccessEnabled,omitempty" tf:"conditional_access_enabled,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	DirectoryID *string `json:"directoryId,omitempty" tf:"directory_id,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	EmailAttributeName *string `json:"emailAttributeName,omitempty" tf:"email_attribute_name,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	EmailClaimName *string `json:"emailClaimName,omitempty" tf:"email_claim_name,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	IdpPublicCert *string `json:"idpPublicCert,omitempty" tf:"idp_public_cert,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	IssuerURL *string `json:"issuerUrl,omitempty" tf:"issuer_url,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	OktaAccount *string `json:"oktaAccount,omitempty" tf:"okta_account,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	OneloginAccount *string `json:"oneloginAccount,omitempty" tf:"onelogin_account,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	PingEnvID *string `json:"pingEnvId,omitempty" tf:"ping_env_id,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	PkceEnabled *bool `json:"pkceEnabled,omitempty" tf:"pkce_enabled,omitempty"`

	// (List of String)
	// +kubebuilder:validation:Optional
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	SignRequest *bool `json:"signRequest,omitempty" tf:"sign_request,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	SsoTargetURL *string `json:"ssoTargetUrl,omitempty" tf:"sso_target_url,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	SupportGroups *bool `json:"supportGroups,omitempty" tf:"support_groups,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	TokenURL *string `json:"tokenUrl,omitempty" tf:"token_url,omitempty"`
}

type IdentityProviderInitParameters struct {

	// (Block List) Provider configuration from the developer documentation. (see below for nested schema)
	// Provider configuration from the [developer documentation](https://developers.cloudflare.com/access/configuring-identity-providers/).
	Config []ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// (String) Friendly name of the Access Identity Provider configuration.
	// Friendly name of the Access Identity Provider configuration.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) Configuration for SCIM settings for a given IDP. (see below for nested schema)
	// Configuration for SCIM settings for a given IDP.
	ScimConfig []ScimConfigInitParameters `json:"scimConfig,omitempty" tf:"scim_config,omitempty"`

	// apps, linkedin, oidc, okta, onelogin, onetimepin, pingone, saml, yandex.
	// The provider type to use. Available values: `azureAD`, `centrify`, `facebook`, `github`, `google`, `google-apps`, `linkedin`, `oidc`, `okta`, `onelogin`, `onetimepin`, `pingone`, `saml`, `yandex`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IdentityProviderObservation struct {

	// (String) The account identifier to target for the resource. Conflicts with zone_id. Modifying this attribute will force creation of a new resource.
	// The account identifier to target for the resource. Conflicts with `zone_id`. **Modifying this attribute will force creation of a new resource.**
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Block List) Provider configuration from the developer documentation. (see below for nested schema)
	// Provider configuration from the [developer documentation](https://developers.cloudflare.com/access/configuring-identity-providers/).
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Friendly name of the Access Identity Provider configuration.
	// Friendly name of the Access Identity Provider configuration.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) Configuration for SCIM settings for a given IDP. (see below for nested schema)
	// Configuration for SCIM settings for a given IDP.
	ScimConfig []ScimConfigObservation `json:"scimConfig,omitempty" tf:"scim_config,omitempty"`

	// apps, linkedin, oidc, okta, onelogin, onetimepin, pingone, saml, yandex.
	// The provider type to use. Available values: `azureAD`, `centrify`, `facebook`, `github`, `google`, `google-apps`, `linkedin`, `oidc`, `okta`, `onelogin`, `onetimepin`, `pingone`, `saml`, `yandex`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The zone identifier to target for the resource. Conflicts with account_id. Modifying this attribute will force creation of a new resource.
	// The zone identifier to target for the resource. Conflicts with `account_id`. **Modifying this attribute will force creation of a new resource.**
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type IdentityProviderParameters struct {

	// (String) The account identifier to target for the resource. Conflicts with zone_id. Modifying this attribute will force creation of a new resource.
	// The account identifier to target for the resource. Conflicts with `zone_id`. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=github.com/milkpirate/provider-cloudflare/apis/account/v1alpha1.Account
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// (Block List) Provider configuration from the developer documentation. (see below for nested schema)
	// Provider configuration from the [developer documentation](https://developers.cloudflare.com/access/configuring-identity-providers/).
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// (String) Friendly name of the Access Identity Provider configuration.
	// Friendly name of the Access Identity Provider configuration.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) Configuration for SCIM settings for a given IDP. (see below for nested schema)
	// Configuration for SCIM settings for a given IDP.
	// +kubebuilder:validation:Optional
	ScimConfig []ScimConfigParameters `json:"scimConfig,omitempty" tf:"scim_config,omitempty"`

	// apps, linkedin, oidc, okta, onelogin, onetimepin, pingone, saml, yandex.
	// The provider type to use. Available values: `azureAD`, `centrify`, `facebook`, `github`, `google`, `google-apps`, `linkedin`, `oidc`, `okta`, `onelogin`, `onetimepin`, `pingone`, `saml`, `yandex`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The zone identifier to target for the resource. Conflicts with account_id. Modifying this attribute will force creation of a new resource.
	// The zone identifier to target for the resource. Conflicts with `account_id`. **Modifying this attribute will force creation of a new resource.**
	// +crossplane:generate:reference:type=github.com/milkpirate/provider-cloudflare/apis/zone/v1alpha1.Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone in zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type ScimConfigInitParameters struct {

	// (Boolean)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean)
	GroupMemberDeprovision *bool `json:"groupMemberDeprovision,omitempty" tf:"group_member_deprovision,omitempty"`

	// (Boolean)
	SeatDeprovision *bool `json:"seatDeprovision,omitempty" tf:"seat_deprovision,omitempty"`

	// (Boolean)
	UserDeprovision *bool `json:"userDeprovision,omitempty" tf:"user_deprovision,omitempty"`
}

type ScimConfigObservation struct {

	// (Boolean)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean)
	GroupMemberDeprovision *bool `json:"groupMemberDeprovision,omitempty" tf:"group_member_deprovision,omitempty"`

	// (Boolean)
	SeatDeprovision *bool `json:"seatDeprovision,omitempty" tf:"seat_deprovision,omitempty"`

	// (Boolean)
	UserDeprovision *bool `json:"userDeprovision,omitempty" tf:"user_deprovision,omitempty"`
}

type ScimConfigParameters struct {

	// (Boolean)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	GroupMemberDeprovision *bool `json:"groupMemberDeprovision,omitempty" tf:"group_member_deprovision,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	SeatDeprovision *bool `json:"seatDeprovision,omitempty" tf:"seat_deprovision,omitempty"`

	// (String, Sensitive)
	// +kubebuilder:validation:Optional
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	UserDeprovision *bool `json:"userDeprovision,omitempty" tf:"user_deprovision,omitempty"`
}

// IdentityProviderSpec defines the desired state of IdentityProvider
type IdentityProviderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IdentityProviderParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IdentityProviderInitParameters `json:"initProvider,omitempty"`
}

// IdentityProviderStatus defines the observed state of IdentityProvider.
type IdentityProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IdentityProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityProvider is the Schema for the IdentityProviders API. Provides a Cloudflare Access Identity Provider resource. Identity Providers are used as an authentication or authorisation source within Access.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type IdentityProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   IdentityProviderSpec   `json:"spec"`
	Status IdentityProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IdentityProviderList contains a list of IdentityProviders
type IdentityProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IdentityProvider `json:"items"`
}

// Repository type metadata.
var (
	IdentityProvider_Kind             = "IdentityProvider"
	IdentityProvider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IdentityProvider_Kind}.String()
	IdentityProvider_KindAPIVersion   = IdentityProvider_Kind + "." + CRDGroupVersion.String()
	IdentityProvider_GroupVersionKind = CRDGroupVersion.WithKind(IdentityProvider_Kind)
)

func init() {
	SchemeBuilder.Register(&IdentityProvider{}, &IdentityProviderList{})
}
