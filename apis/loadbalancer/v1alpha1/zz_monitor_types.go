// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HeaderInitParameters struct {

	// Agent header cannot be overridden. (see below for nested schema)
	// The header name.
	Header *string `json:"header,omitempty" tf:"header,omitempty"`

	// (Set of String) A list of values for the header.
	// A list of values for the header.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type HeaderObservation struct {

	// Agent header cannot be overridden. (see below for nested schema)
	// The header name.
	Header *string `json:"header,omitempty" tf:"header,omitempty"`

	// (Set of String) A list of values for the header.
	// A list of values for the header.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type HeaderParameters struct {

	// Agent header cannot be overridden. (see below for nested schema)
	// The header name.
	// +kubebuilder:validation:Optional
	Header *string `json:"header" tf:"header,omitempty"`

	// (Set of String) A list of values for the header.
	// A list of values for the header.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type MonitorInitParameters struct {

	// (Boolean) Do not validate the certificate when monitor use HTTPS.  Only valid if type is "http" or "https".
	// Do not validate the certificate when monitor use HTTPS.  Only valid if `type` is "http" or "https".
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// (Number) To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times. Defaults to 0.
	// To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times. Defaults to `0`.
	ConsecutiveDown *float64 `json:"consecutiveDown,omitempty" tf:"consecutive_down,omitempty"`

	// (Number) To be marked healthy the monitored origin must pass this healthcheck N consecutive times. Defaults to 0.
	// To be marked healthy the monitored origin must pass this healthcheck N consecutive times. Defaults to `0`.
	ConsecutiveUp *float64 `json:"consecutiveUp,omitempty" tf:"consecutive_up,omitempty"`

	// (String) Free text description.
	// Free text description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. Only valid if type is "http" or "https".
	// A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. Only valid if `type` is "http" or "https".
	ExpectedBody *string `json:"expectedBody,omitempty" tf:"expected_body,omitempty"`

	// (String) The expected HTTP response code or code range of the health check. Eg 2xx. Only valid and required if type is "http" or "https".
	// The expected HTTP response code or code range of the health check. Eg `2xx`. Only valid and required if `type` is "http" or "https".
	ExpectedCodes *string `json:"expectedCodes,omitempty" tf:"expected_codes,omitempty"`

	// (Boolean) Follow redirects if returned by the origin. Only valid if type is "http" or "https".
	// Follow redirects if returned by the origin. Only valid if `type` is "http" or "https".
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// Agent header cannot be overridden. (see below for nested schema)
	// The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.
	Header []HeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	// (Number) The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations. Defaults to 60.
	// The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations. Defaults to `60`.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// (String) The method to use for the health check.
	// The method to use for the health check.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String) The endpoint path to health check against.
	// The endpoint path to health check against.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Number) The port number to use for the healthcheck, required when creating a TCP monitor.
	// The port number to use for the healthcheck, required when creating a TCP monitor.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) Assign this monitor to emulate the specified zone while probing. Only valid if type is "http" or "https".
	// Assign this monitor to emulate the specified zone while probing. Only valid if `type` is "http" or "https".
	ProbeZone *string `json:"probeZone,omitempty" tf:"probe_zone,omitempty"`

	// (Number) The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. Defaults to 2.
	// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. Defaults to `2`.
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// (Number) The timeout (in seconds) before marking the health check as failed. Defaults to 5.
	// The timeout (in seconds) before marking the health check as failed. Defaults to `5`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) The protocol to use for the healthcheck. Available values: http, https, tcp, udp_icmp, icmp_ping, smtp. Defaults to http.
	// The protocol to use for the healthcheck. Available values: `http`, `https`, `tcp`, `udp_icmp`, `icmp_ping`, `smtp`. Defaults to `http`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MonitorObservation struct {

	// (String) The account identifier to target for the resource.
	// The account identifier to target for the resource.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Boolean) Do not validate the certificate when monitor use HTTPS.  Only valid if type is "http" or "https".
	// Do not validate the certificate when monitor use HTTPS.  Only valid if `type` is "http" or "https".
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// (Number) To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times. Defaults to 0.
	// To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times. Defaults to `0`.
	ConsecutiveDown *float64 `json:"consecutiveDown,omitempty" tf:"consecutive_down,omitempty"`

	// (Number) To be marked healthy the monitored origin must pass this healthcheck N consecutive times. Defaults to 0.
	// To be marked healthy the monitored origin must pass this healthcheck N consecutive times. Defaults to `0`.
	ConsecutiveUp *float64 `json:"consecutiveUp,omitempty" tf:"consecutive_up,omitempty"`

	// (String) The RFC3339 timestamp of when the load balancer monitor was created.
	// The RFC3339 timestamp of when the load balancer monitor was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String) Free text description.
	// Free text description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. Only valid if type is "http" or "https".
	// A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. Only valid if `type` is "http" or "https".
	ExpectedBody *string `json:"expectedBody,omitempty" tf:"expected_body,omitempty"`

	// (String) The expected HTTP response code or code range of the health check. Eg 2xx. Only valid and required if type is "http" or "https".
	// The expected HTTP response code or code range of the health check. Eg `2xx`. Only valid and required if `type` is "http" or "https".
	ExpectedCodes *string `json:"expectedCodes,omitempty" tf:"expected_codes,omitempty"`

	// (Boolean) Follow redirects if returned by the origin. Only valid if type is "http" or "https".
	// Follow redirects if returned by the origin. Only valid if `type` is "http" or "https".
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// Agent header cannot be overridden. (see below for nested schema)
	// The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.
	Header []HeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations. Defaults to 60.
	// The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations. Defaults to `60`.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// (String) The method to use for the health check.
	// The method to use for the health check.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String) The RFC3339 timestamp of when the load balancer monitor was last modified.
	// The RFC3339 timestamp of when the load balancer monitor was last modified.
	ModifiedOn *string `json:"modifiedOn,omitempty" tf:"modified_on,omitempty"`

	// (String) The endpoint path to health check against.
	// The endpoint path to health check against.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Number) The port number to use for the healthcheck, required when creating a TCP monitor.
	// The port number to use for the healthcheck, required when creating a TCP monitor.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) Assign this monitor to emulate the specified zone while probing. Only valid if type is "http" or "https".
	// Assign this monitor to emulate the specified zone while probing. Only valid if `type` is "http" or "https".
	ProbeZone *string `json:"probeZone,omitempty" tf:"probe_zone,omitempty"`

	// (Number) The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. Defaults to 2.
	// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. Defaults to `2`.
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// (Number) The timeout (in seconds) before marking the health check as failed. Defaults to 5.
	// The timeout (in seconds) before marking the health check as failed. Defaults to `5`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) The protocol to use for the healthcheck. Available values: http, https, tcp, udp_icmp, icmp_ping, smtp. Defaults to http.
	// The protocol to use for the healthcheck. Available values: `http`, `https`, `tcp`, `udp_icmp`, `icmp_ping`, `smtp`. Defaults to `http`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MonitorParameters struct {

	// (String) The account identifier to target for the resource.
	// The account identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/milkpirate/provider-cloudflare/apis/account/v1alpha1.Account
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// (Boolean) Do not validate the certificate when monitor use HTTPS.  Only valid if type is "http" or "https".
	// Do not validate the certificate when monitor use HTTPS.  Only valid if `type` is "http" or "https".
	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// (Number) To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times. Defaults to 0.
	// To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times. Defaults to `0`.
	// +kubebuilder:validation:Optional
	ConsecutiveDown *float64 `json:"consecutiveDown,omitempty" tf:"consecutive_down,omitempty"`

	// (Number) To be marked healthy the monitored origin must pass this healthcheck N consecutive times. Defaults to 0.
	// To be marked healthy the monitored origin must pass this healthcheck N consecutive times. Defaults to `0`.
	// +kubebuilder:validation:Optional
	ConsecutiveUp *float64 `json:"consecutiveUp,omitempty" tf:"consecutive_up,omitempty"`

	// (String) Free text description.
	// Free text description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. Only valid if type is "http" or "https".
	// A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. Only valid if `type` is "http" or "https".
	// +kubebuilder:validation:Optional
	ExpectedBody *string `json:"expectedBody,omitempty" tf:"expected_body,omitempty"`

	// (String) The expected HTTP response code or code range of the health check. Eg 2xx. Only valid and required if type is "http" or "https".
	// The expected HTTP response code or code range of the health check. Eg `2xx`. Only valid and required if `type` is "http" or "https".
	// +kubebuilder:validation:Optional
	ExpectedCodes *string `json:"expectedCodes,omitempty" tf:"expected_codes,omitempty"`

	// (Boolean) Follow redirects if returned by the origin. Only valid if type is "http" or "https".
	// Follow redirects if returned by the origin. Only valid if `type` is "http" or "https".
	// +kubebuilder:validation:Optional
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// Agent header cannot be overridden. (see below for nested schema)
	// The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.
	// +kubebuilder:validation:Optional
	Header []HeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// (Number) The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations. Defaults to 60.
	// The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations. Defaults to `60`.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// (String) The method to use for the health check.
	// The method to use for the health check.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String) The endpoint path to health check against.
	// The endpoint path to health check against.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Number) The port number to use for the healthcheck, required when creating a TCP monitor.
	// The port number to use for the healthcheck, required when creating a TCP monitor.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) Assign this monitor to emulate the specified zone while probing. Only valid if type is "http" or "https".
	// Assign this monitor to emulate the specified zone while probing. Only valid if `type` is "http" or "https".
	// +kubebuilder:validation:Optional
	ProbeZone *string `json:"probeZone,omitempty" tf:"probe_zone,omitempty"`

	// (Number) The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. Defaults to 2.
	// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. Defaults to `2`.
	// +kubebuilder:validation:Optional
	Retries *float64 `json:"retries,omitempty" tf:"retries,omitempty"`

	// (Number) The timeout (in seconds) before marking the health check as failed. Defaults to 5.
	// The timeout (in seconds) before marking the health check as failed. Defaults to `5`.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) The protocol to use for the healthcheck. Available values: http, https, tcp, udp_icmp, icmp_ping, smtp. Defaults to http.
	// The protocol to use for the healthcheck. Available values: `http`, `https`, `tcp`, `udp_icmp`, `icmp_ping`, `smtp`. Defaults to `http`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// MonitorSpec defines the desired state of Monitor
type MonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MonitorInitParameters `json:"initProvider,omitempty"`
}

// MonitorStatus defines the observed state of Monitor.
type MonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Monitor is the Schema for the Monitors API. If Cloudflare's Load Balancing to load-balance across multiple origin servers or data centers, you configure one of these Monitors to actively check the availability of those servers over HTTP(S) or TCP.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type Monitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitorSpec   `json:"spec"`
	Status            MonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorList contains a list of Monitors
type MonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Monitor `json:"items"`
}

// Repository type metadata.
var (
	Monitor_Kind             = "Monitor"
	Monitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Monitor_Kind}.String()
	Monitor_KindAPIVersion   = Monitor_Kind + "." + CRDGroupVersion.String()
	Monitor_GroupVersionKind = CRDGroupVersion.WithKind(Monitor_Kind)
)

func init() {
	SchemeBuilder.Register(&Monitor{}, &MonitorList{})
}
