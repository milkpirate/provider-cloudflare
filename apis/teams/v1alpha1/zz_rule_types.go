// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuditSSHInitParameters struct {

	// (Boolean) Log all SSH commands.
	// Log all SSH commands.
	CommandLogging *bool `json:"commandLogging,omitempty" tf:"command_logging,omitempty"`
}

type AuditSSHObservation struct {

	// (Boolean) Log all SSH commands.
	// Log all SSH commands.
	CommandLogging *bool `json:"commandLogging,omitempty" tf:"command_logging,omitempty"`
}

type AuditSSHParameters struct {

	// (Boolean) Log all SSH commands.
	// Log all SSH commands.
	// +kubebuilder:validation:Optional
	CommandLogging *bool `json:"commandLogging" tf:"command_logging,omitempty"`
}

type BisoAdminControlsInitParameters struct {

	// paste.
	// Disable copy-paste.
	DisableCopyPaste *bool `json:"disableCopyPaste,omitempty" tf:"disable_copy_paste,omitempty"`

	// (Boolean) Disable download.
	// Disable download.
	DisableDownload *bool `json:"disableDownload,omitempty" tf:"disable_download,omitempty"`

	// (Boolean) Disable keyboard usage.
	// Disable keyboard usage.
	DisableKeyboard *bool `json:"disableKeyboard,omitempty" tf:"disable_keyboard,omitempty"`

	// (Boolean) Disable printing.
	// Disable printing.
	DisablePrinting *bool `json:"disablePrinting,omitempty" tf:"disable_printing,omitempty"`

	// (Boolean) Disable upload.
	// Disable upload.
	DisableUpload *bool `json:"disableUpload,omitempty" tf:"disable_upload,omitempty"`
}

type BisoAdminControlsObservation struct {

	// paste.
	// Disable copy-paste.
	DisableCopyPaste *bool `json:"disableCopyPaste,omitempty" tf:"disable_copy_paste,omitempty"`

	// (Boolean) Disable download.
	// Disable download.
	DisableDownload *bool `json:"disableDownload,omitempty" tf:"disable_download,omitempty"`

	// (Boolean) Disable keyboard usage.
	// Disable keyboard usage.
	DisableKeyboard *bool `json:"disableKeyboard,omitempty" tf:"disable_keyboard,omitempty"`

	// (Boolean) Disable printing.
	// Disable printing.
	DisablePrinting *bool `json:"disablePrinting,omitempty" tf:"disable_printing,omitempty"`

	// (Boolean) Disable upload.
	// Disable upload.
	DisableUpload *bool `json:"disableUpload,omitempty" tf:"disable_upload,omitempty"`
}

type BisoAdminControlsParameters struct {

	// paste.
	// Disable copy-paste.
	// +kubebuilder:validation:Optional
	DisableCopyPaste *bool `json:"disableCopyPaste,omitempty" tf:"disable_copy_paste,omitempty"`

	// (Boolean) Disable download.
	// Disable download.
	// +kubebuilder:validation:Optional
	DisableDownload *bool `json:"disableDownload,omitempty" tf:"disable_download,omitempty"`

	// (Boolean) Disable keyboard usage.
	// Disable keyboard usage.
	// +kubebuilder:validation:Optional
	DisableKeyboard *bool `json:"disableKeyboard,omitempty" tf:"disable_keyboard,omitempty"`

	// (Boolean) Disable printing.
	// Disable printing.
	// +kubebuilder:validation:Optional
	DisablePrinting *bool `json:"disablePrinting,omitempty" tf:"disable_printing,omitempty"`

	// (Boolean) Disable upload.
	// Disable upload.
	// +kubebuilder:validation:Optional
	DisableUpload *bool `json:"disableUpload,omitempty" tf:"disable_upload,omitempty"`
}

type CheckSessionInitParameters struct {

	// (String) Configure how fresh the session needs to be to be considered valid.
	// Configure how fresh the session needs to be to be considered valid.
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// (Boolean) Enable session enforcement for this rule.
	// Enable session enforcement for this rule.
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`
}

type CheckSessionObservation struct {

	// (String) Configure how fresh the session needs to be to be considered valid.
	// Configure how fresh the session needs to be to be considered valid.
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// (Boolean) Enable session enforcement for this rule.
	// Enable session enforcement for this rule.
	Enforce *bool `json:"enforce,omitempty" tf:"enforce,omitempty"`
}

type CheckSessionParameters struct {

	// (String) Configure how fresh the session needs to be to be considered valid.
	// Configure how fresh the session needs to be to be considered valid.
	// +kubebuilder:validation:Optional
	Duration *string `json:"duration" tf:"duration,omitempty"`

	// (Boolean) Enable session enforcement for this rule.
	// Enable session enforcement for this rule.
	// +kubebuilder:validation:Optional
	Enforce *bool `json:"enforce" tf:"enforce,omitempty"`
}

type DNSResolversInitParameters struct {

	// (Block List) IPv4 resolvers. (see below for nested schema)
	// IPv4 resolvers.
	IPv4 []IPv4InitParameters `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (Block List) IPv6 resolvers. (see below for nested schema)
	// IPv6 resolvers.
	IPv6 []IPv6InitParameters `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type DNSResolversObservation struct {

	// (Block List) IPv4 resolvers. (see below for nested schema)
	// IPv4 resolvers.
	IPv4 []IPv4Observation `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (Block List) IPv6 resolvers. (see below for nested schema)
	// IPv6 resolvers.
	IPv6 []IPv6Observation `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type DNSResolversParameters struct {

	// (Block List) IPv4 resolvers. (see below for nested schema)
	// IPv4 resolvers.
	// +kubebuilder:validation:Optional
	IPv4 []IPv4Parameters `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (Block List) IPv6 resolvers. (see below for nested schema)
	// IPv6 resolvers.
	// +kubebuilder:validation:Optional
	IPv6 []IPv6Parameters `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type EgressInitParameters struct {

	// (Block List) IPv4 resolvers. (see below for nested schema)
	// The IPv4 address to be used for egress.
	IPv4 *string `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (String) The IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egreass via Warp IPs.
	// The IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egreass via Warp IPs.
	IPv4Fallback *string `json:"ipv4Fallback,omitempty" tf:"ipv4_fallback,omitempty"`

	// (Block List) IPv6 resolvers. (see below for nested schema)
	// The IPv6 range to be used for egress.
	IPv6 *string `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type EgressObservation struct {

	// (Block List) IPv4 resolvers. (see below for nested schema)
	// The IPv4 address to be used for egress.
	IPv4 *string `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// (String) The IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egreass via Warp IPs.
	// The IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egreass via Warp IPs.
	IPv4Fallback *string `json:"ipv4Fallback,omitempty" tf:"ipv4_fallback,omitempty"`

	// (Block List) IPv6 resolvers. (see below for nested schema)
	// The IPv6 range to be used for egress.
	IPv6 *string `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type EgressParameters struct {

	// (Block List) IPv4 resolvers. (see below for nested schema)
	// The IPv4 address to be used for egress.
	// +kubebuilder:validation:Optional
	IPv4 *string `json:"ipv4" tf:"ipv4,omitempty"`

	// (String) The IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egreass via Warp IPs.
	// The IPv4 address to be used for egress in the event of an error egressing with the primary IPv4. Can be '0.0.0.0' to indicate local egreass via Warp IPs.
	// +kubebuilder:validation:Optional
	IPv4Fallback *string `json:"ipv4Fallback,omitempty" tf:"ipv4_fallback,omitempty"`

	// (Block List) IPv6 resolvers. (see below for nested schema)
	// The IPv6 range to be used for egress.
	// +kubebuilder:validation:Optional
	IPv6 *string `json:"ipv6" tf:"ipv6,omitempty"`
}

type IPv4InitParameters struct {

	// (String) The IPv4 or IPv6 address of the upstream resolver.
	// The IPv4 or IPv6 address of the upstream resolver.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for the upstream resolver. Defaults to 53.
	// A port number to use for the upstream resolver. Defaults to `53`.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// Whether to connect to this resolver over a private network. Must be set when `vnet_id` is set.
	RouteThroughPrivateNetwork *bool `json:"routeThroughPrivateNetwork,omitempty" tf:"route_through_private_network,omitempty"`

	// (String) specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// specify a virtual network for this resolver. Uses default virtual network id if omitted.
	VnetID *string `json:"vnetId,omitempty" tf:"vnet_id,omitempty"`
}

type IPv4Observation struct {

	// (String) The IPv4 or IPv6 address of the upstream resolver.
	// The IPv4 or IPv6 address of the upstream resolver.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for the upstream resolver. Defaults to 53.
	// A port number to use for the upstream resolver. Defaults to `53`.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// Whether to connect to this resolver over a private network. Must be set when `vnet_id` is set.
	RouteThroughPrivateNetwork *bool `json:"routeThroughPrivateNetwork,omitempty" tf:"route_through_private_network,omitempty"`

	// (String) specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// specify a virtual network for this resolver. Uses default virtual network id if omitted.
	VnetID *string `json:"vnetId,omitempty" tf:"vnet_id,omitempty"`
}

type IPv4Parameters struct {

	// (String) The IPv4 or IPv6 address of the upstream resolver.
	// The IPv4 or IPv6 address of the upstream resolver.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip" tf:"ip,omitempty"`

	// (Number) A port number to use for the upstream resolver. Defaults to 53.
	// A port number to use for the upstream resolver. Defaults to `53`.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// Whether to connect to this resolver over a private network. Must be set when `vnet_id` is set.
	// +kubebuilder:validation:Optional
	RouteThroughPrivateNetwork *bool `json:"routeThroughPrivateNetwork,omitempty" tf:"route_through_private_network,omitempty"`

	// (String) specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// +kubebuilder:validation:Optional
	VnetID *string `json:"vnetId,omitempty" tf:"vnet_id,omitempty"`
}

type IPv6InitParameters struct {

	// (String) The IPv4 or IPv6 address of the upstream resolver.
	// The IPv4 or IPv6 address of the upstream resolver.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for the upstream resolver. Defaults to 53.
	// A port number to use for the upstream resolver. Defaults to `53`.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// Whether to connect to this resolver over a private network. Must be set when `vnet_id` is set.
	RouteThroughPrivateNetwork *bool `json:"routeThroughPrivateNetwork,omitempty" tf:"route_through_private_network,omitempty"`

	// (String) specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// specify a virtual network for this resolver. Uses default virtual network id if omitted.
	VnetID *string `json:"vnetId,omitempty" tf:"vnet_id,omitempty"`
}

type IPv6Observation struct {

	// (String) The IPv4 or IPv6 address of the upstream resolver.
	// The IPv4 or IPv6 address of the upstream resolver.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for the upstream resolver. Defaults to 53.
	// A port number to use for the upstream resolver. Defaults to `53`.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// Whether to connect to this resolver over a private network. Must be set when `vnet_id` is set.
	RouteThroughPrivateNetwork *bool `json:"routeThroughPrivateNetwork,omitempty" tf:"route_through_private_network,omitempty"`

	// (String) specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// specify a virtual network for this resolver. Uses default virtual network id if omitted.
	VnetID *string `json:"vnetId,omitempty" tf:"vnet_id,omitempty"`
}

type IPv6Parameters struct {

	// (String) The IPv4 or IPv6 address of the upstream resolver.
	// The IPv4 or IPv6 address of the upstream resolver.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip" tf:"ip,omitempty"`

	// (Number) A port number to use for the upstream resolver. Defaults to 53.
	// A port number to use for the upstream resolver. Defaults to `53`.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Boolean) Whether to connect to this resolver over a private network. Must be set when vnet_id is set.
	// Whether to connect to this resolver over a private network. Must be set when `vnet_id` is set.
	// +kubebuilder:validation:Optional
	RouteThroughPrivateNetwork *bool `json:"routeThroughPrivateNetwork,omitempty" tf:"route_through_private_network,omitempty"`

	// (String) specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// specify a virtual network for this resolver. Uses default virtual network id if omitted.
	// +kubebuilder:validation:Optional
	VnetID *string `json:"vnetId,omitempty" tf:"vnet_id,omitempty"`
}

type L4OverrideInitParameters struct {

	// (String) The IPv4 or IPv6 address of the upstream resolver.
	// Override IP to forward traffic to.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for the upstream resolver. Defaults to 53.
	// Override Port to forward traffic to.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type L4OverrideObservation struct {

	// (String) The IPv4 or IPv6 address of the upstream resolver.
	// Override IP to forward traffic to.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Number) A port number to use for the upstream resolver. Defaults to 53.
	// Override Port to forward traffic to.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type L4OverrideParameters struct {

	// (String) The IPv4 or IPv6 address of the upstream resolver.
	// Override IP to forward traffic to.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip" tf:"ip,omitempty"`

	// (Number) A port number to use for the upstream resolver. Defaults to 53.
	// Override Port to forward traffic to.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port" tf:"port,omitempty"`
}

type RuleInitParameters struct {

	// (String) The action executed by matched teams rule. Available values: allow, block, safesearch, ytrestricted, on, off, scan, noscan, isolate, noisolate, override, l4_override, egress, audit_ssh, resolve.
	// The action executed by matched teams rule. Available values: `allow`, `block`, `safesearch`, `ytrestricted`, `on`, `off`, `scan`, `noscan`, `isolate`, `noisolate`, `override`, `l4_override`, `egress`, `audit_ssh`, `resolve`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) The description of the teams rule.
	// The description of the teams rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The wirefilter expression to be used for device_posture check matching.
	// The wirefilter expression to be used for device_posture check matching.
	DevicePosture *string `json:"devicePosture,omitempty" tf:"device_posture,omitempty"`

	// (Boolean) Indicator of rule enablement.
	// Indicator of rule enablement.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (List of String) The protocol or layer to evaluate the traffic and identity expressions.
	// The protocol or layer to evaluate the traffic and identity expressions.
	Filters []*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) The wirefilter expression to be used for identity matching.
	// The wirefilter expression to be used for identity matching.
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	// (String) The name of the teams rule.
	// The name of the teams rule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The evaluation precedence of the teams rule.
	// The evaluation precedence of the teams rule.
	Precedence *float64 `json:"precedence,omitempty" tf:"precedence,omitempty"`

	// (Block List, Max: 1) Additional rule settings. (see below for nested schema)
	// Additional rule settings.
	RuleSettings []RuleSettingsInitParameters `json:"ruleSettings,omitempty" tf:"rule_settings,omitempty"`

	// (String) The wirefilter expression to be used for traffic matching.
	// The wirefilter expression to be used for traffic matching.
	Traffic *string `json:"traffic,omitempty" tf:"traffic,omitempty"`
}

type RuleObservation struct {

	// (String) The account identifier to target for the resource.
	// The account identifier to target for the resource.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (String) The action executed by matched teams rule. Available values: allow, block, safesearch, ytrestricted, on, off, scan, noscan, isolate, noisolate, override, l4_override, egress, audit_ssh, resolve.
	// The action executed by matched teams rule. Available values: `allow`, `block`, `safesearch`, `ytrestricted`, `on`, `off`, `scan`, `noscan`, `isolate`, `noisolate`, `override`, `l4_override`, `egress`, `audit_ssh`, `resolve`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) The description of the teams rule.
	// The description of the teams rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The wirefilter expression to be used for device_posture check matching.
	// The wirefilter expression to be used for device_posture check matching.
	DevicePosture *string `json:"devicePosture,omitempty" tf:"device_posture,omitempty"`

	// (Boolean) Indicator of rule enablement.
	// Indicator of rule enablement.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (List of String) The protocol or layer to evaluate the traffic and identity expressions.
	// The protocol or layer to evaluate the traffic and identity expressions.
	Filters []*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The wirefilter expression to be used for identity matching.
	// The wirefilter expression to be used for identity matching.
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	// (String) The name of the teams rule.
	// The name of the teams rule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The evaluation precedence of the teams rule.
	// The evaluation precedence of the teams rule.
	Precedence *float64 `json:"precedence,omitempty" tf:"precedence,omitempty"`

	// (Block List, Max: 1) Additional rule settings. (see below for nested schema)
	// Additional rule settings.
	RuleSettings []RuleSettingsObservation `json:"ruleSettings,omitempty" tf:"rule_settings,omitempty"`

	// (String) The wirefilter expression to be used for traffic matching.
	// The wirefilter expression to be used for traffic matching.
	Traffic *string `json:"traffic,omitempty" tf:"traffic,omitempty"`

	// (Number)
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type RuleParameters struct {

	// (String) The account identifier to target for the resource.
	// The account identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/milkpirate/provider-cloudflare/apis/account/v1alpha1.Account
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// (String) The action executed by matched teams rule. Available values: allow, block, safesearch, ytrestricted, on, off, scan, noscan, isolate, noisolate, override, l4_override, egress, audit_ssh, resolve.
	// The action executed by matched teams rule. Available values: `allow`, `block`, `safesearch`, `ytrestricted`, `on`, `off`, `scan`, `noscan`, `isolate`, `noisolate`, `override`, `l4_override`, `egress`, `audit_ssh`, `resolve`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) The description of the teams rule.
	// The description of the teams rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The wirefilter expression to be used for device_posture check matching.
	// The wirefilter expression to be used for device_posture check matching.
	// +kubebuilder:validation:Optional
	DevicePosture *string `json:"devicePosture,omitempty" tf:"device_posture,omitempty"`

	// (Boolean) Indicator of rule enablement.
	// Indicator of rule enablement.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (List of String) The protocol or layer to evaluate the traffic and identity expressions.
	// The protocol or layer to evaluate the traffic and identity expressions.
	// +kubebuilder:validation:Optional
	Filters []*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) The wirefilter expression to be used for identity matching.
	// The wirefilter expression to be used for identity matching.
	// +kubebuilder:validation:Optional
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	// (String) The name of the teams rule.
	// The name of the teams rule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The evaluation precedence of the teams rule.
	// The evaluation precedence of the teams rule.
	// +kubebuilder:validation:Optional
	Precedence *float64 `json:"precedence,omitempty" tf:"precedence,omitempty"`

	// (Block List, Max: 1) Additional rule settings. (see below for nested schema)
	// Additional rule settings.
	// +kubebuilder:validation:Optional
	RuleSettings []RuleSettingsParameters `json:"ruleSettings,omitempty" tf:"rule_settings,omitempty"`

	// (String) The wirefilter expression to be used for traffic matching.
	// The wirefilter expression to be used for traffic matching.
	// +kubebuilder:validation:Optional
	Traffic *string `json:"traffic,omitempty" tf:"traffic,omitempty"`
}

type RuleSettingsInitParameters struct {

	// value pairs.
	// Add custom headers to allowed requests in the form of key-value pairs.
	AddHeaders map[string]*string `json:"addHeaders,omitempty" tf:"add_headers,omitempty"`

	// (Boolean) Allow parent MSP accounts to enable bypass their children's rules.
	// Allow parent MSP accounts to enable bypass their children's rules.
	AllowChildBypass *bool `json:"allowChildBypass,omitempty" tf:"allow_child_bypass,omitempty"`

	// (Block List, Max: 1) Settings for auditing SSH usage. (see below for nested schema)
	// Settings for auditing SSH usage.
	AuditSSH []AuditSSHInitParameters `json:"auditSsh,omitempty" tf:"audit_ssh,omitempty"`

	// (Block List, Max: 1) Configure how browser isolation behaves. (see below for nested schema)
	// Configure how browser isolation behaves.
	BisoAdminControls []BisoAdminControlsInitParameters `json:"bisoAdminControls,omitempty" tf:"biso_admin_controls,omitempty"`

	// (Boolean) Indicator of block page enablement.
	// Indicator of block page enablement.
	BlockPageEnabled *bool `json:"blockPageEnabled,omitempty" tf:"block_page_enabled,omitempty"`

	// (String) The displayed reason for a user being blocked.
	// The displayed reason for a user being blocked.
	BlockPageReason *string `json:"blockPageReason,omitempty" tf:"block_page_reason,omitempty"`

	// (Boolean) Allow child MSP accounts to bypass their parent's rule.
	// Allow child MSP accounts to bypass their parent's rule.
	BypassParentRule *bool `json:"bypassParentRule,omitempty" tf:"bypass_parent_rule,omitempty"`

	// (Block List, Max: 1) Configure how session check behaves. (see below for nested schema)
	// Configure how session check behaves.
	CheckSession []CheckSessionInitParameters `json:"checkSession,omitempty" tf:"check_session,omitempty"`

	// (Block List, Max: 1) Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when resolve_dns_through_cloudflare is set. DNS queries will route to the address closest to their origin. (see below for nested schema)
	// Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when resolve_dns_through_cloudflare is set. DNS queries will route to the address closest to their origin.
	DNSResolvers []DNSResolversInitParameters `json:"dnsResolvers,omitempty" tf:"dns_resolvers,omitempty"`

	// (Block List, Max: 1) Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs. (see below for nested schema)
	// Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs.
	Egress []EgressInitParameters `json:"egress,omitempty" tf:"egress,omitempty"`

	// (Boolean) Turns on IP category based filter on dns if the rule contains dns category checks.
	// Turns on IP category based filter on dns if the rule contains dns category checks.
	IPCategories *bool `json:"ipCategories,omitempty" tf:"ip_categories,omitempty"`

	// (Boolean) Disable DNSSEC validation (must be Allow rule).
	// Disable DNSSEC validation (must be Allow rule).
	InsecureDisableDNSSECValidation *bool `json:"insecureDisableDnssecValidation,omitempty" tf:"insecure_disable_dnssec_validation,omitempty"`

	// (Block List, Max: 1) Settings to forward layer 4 traffic. (see below for nested schema)
	// Settings to forward layer 4 traffic.
	L4Override []L4OverrideInitParameters `json:"l4override,omitempty" tf:"l4override,omitempty"`

	// (Block List, Max: 1) Notification settings on a block rule. (see below for nested schema)
	// Notification settings on a block rule.
	NotificationSettings []RuleSettingsNotificationSettingsInitParameters `json:"notificationSettings,omitempty" tf:"notification_settings,omitempty"`

	// (String) The host to override matching DNS queries with.
	// The host to override matching DNS queries with.
	OverrideHost *string `json:"overrideHost,omitempty" tf:"override_host,omitempty"`

	// (List of String) The IPs to override matching DNS queries with.
	// The IPs to override matching DNS queries with.
	OverrideIps []*string `json:"overrideIps,omitempty" tf:"override_ips,omitempty"`

	// (Block List, Max: 1) Configure DLP Payload Logging settings for this rule. (see below for nested schema)
	// Configure DLP Payload Logging settings for this rule.
	PayloadLog []RuleSettingsPayloadLogInitParameters `json:"payloadLog,omitempty" tf:"payload_log,omitempty"`

	// (Boolean) Enable sending queries that match the resolver policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when dns_resolvers are specified.
	// Enable sending queries that match the resolver policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when `dns_resolvers` are specified.
	ResolveDNSThroughCloudflare *bool `json:"resolveDnsThroughCloudflare,omitempty" tf:"resolve_dns_through_cloudflare,omitempty"`

	// (Block List, Max: 1) Configure untrusted certificate settings for this rule. (see below for nested schema)
	// Configure untrusted certificate settings for this rule.
	UntrustedCert []UntrustedCertInitParameters `json:"untrustedCert,omitempty" tf:"untrusted_cert,omitempty"`
}

type RuleSettingsNotificationSettingsInitParameters struct {

	// (Boolean) Indicator of rule enablement.
	// Enable notification settings.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Notification content.
	// Notification content.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Support URL to show in the notification.
	// Support URL to show in the notification.
	SupportURL *string `json:"supportUrl,omitempty" tf:"support_url,omitempty"`
}

type RuleSettingsNotificationSettingsObservation struct {

	// (Boolean) Indicator of rule enablement.
	// Enable notification settings.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Notification content.
	// Notification content.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Support URL to show in the notification.
	// Support URL to show in the notification.
	SupportURL *string `json:"supportUrl,omitempty" tf:"support_url,omitempty"`
}

type RuleSettingsNotificationSettingsParameters struct {

	// (Boolean) Indicator of rule enablement.
	// Enable notification settings.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Notification content.
	// Notification content.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Support URL to show in the notification.
	// Support URL to show in the notification.
	// +kubebuilder:validation:Optional
	SupportURL *string `json:"supportUrl,omitempty" tf:"support_url,omitempty"`
}

type RuleSettingsObservation struct {

	// value pairs.
	// Add custom headers to allowed requests in the form of key-value pairs.
	AddHeaders map[string]*string `json:"addHeaders,omitempty" tf:"add_headers,omitempty"`

	// (Boolean) Allow parent MSP accounts to enable bypass their children's rules.
	// Allow parent MSP accounts to enable bypass their children's rules.
	AllowChildBypass *bool `json:"allowChildBypass,omitempty" tf:"allow_child_bypass,omitempty"`

	// (Block List, Max: 1) Settings for auditing SSH usage. (see below for nested schema)
	// Settings for auditing SSH usage.
	AuditSSH []AuditSSHObservation `json:"auditSsh,omitempty" tf:"audit_ssh,omitempty"`

	// (Block List, Max: 1) Configure how browser isolation behaves. (see below for nested schema)
	// Configure how browser isolation behaves.
	BisoAdminControls []BisoAdminControlsObservation `json:"bisoAdminControls,omitempty" tf:"biso_admin_controls,omitempty"`

	// (Boolean) Indicator of block page enablement.
	// Indicator of block page enablement.
	BlockPageEnabled *bool `json:"blockPageEnabled,omitempty" tf:"block_page_enabled,omitempty"`

	// (String) The displayed reason for a user being blocked.
	// The displayed reason for a user being blocked.
	BlockPageReason *string `json:"blockPageReason,omitempty" tf:"block_page_reason,omitempty"`

	// (Boolean) Allow child MSP accounts to bypass their parent's rule.
	// Allow child MSP accounts to bypass their parent's rule.
	BypassParentRule *bool `json:"bypassParentRule,omitempty" tf:"bypass_parent_rule,omitempty"`

	// (Block List, Max: 1) Configure how session check behaves. (see below for nested schema)
	// Configure how session check behaves.
	CheckSession []CheckSessionObservation `json:"checkSession,omitempty" tf:"check_session,omitempty"`

	// (Block List, Max: 1) Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when resolve_dns_through_cloudflare is set. DNS queries will route to the address closest to their origin. (see below for nested schema)
	// Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when resolve_dns_through_cloudflare is set. DNS queries will route to the address closest to their origin.
	DNSResolvers []DNSResolversObservation `json:"dnsResolvers,omitempty" tf:"dns_resolvers,omitempty"`

	// (Block List, Max: 1) Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs. (see below for nested schema)
	// Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs.
	Egress []EgressObservation `json:"egress,omitempty" tf:"egress,omitempty"`

	// (Boolean) Turns on IP category based filter on dns if the rule contains dns category checks.
	// Turns on IP category based filter on dns if the rule contains dns category checks.
	IPCategories *bool `json:"ipCategories,omitempty" tf:"ip_categories,omitempty"`

	// (Boolean) Disable DNSSEC validation (must be Allow rule).
	// Disable DNSSEC validation (must be Allow rule).
	InsecureDisableDNSSECValidation *bool `json:"insecureDisableDnssecValidation,omitempty" tf:"insecure_disable_dnssec_validation,omitempty"`

	// (Block List, Max: 1) Settings to forward layer 4 traffic. (see below for nested schema)
	// Settings to forward layer 4 traffic.
	L4Override []L4OverrideObservation `json:"l4override,omitempty" tf:"l4override,omitempty"`

	// (Block List, Max: 1) Notification settings on a block rule. (see below for nested schema)
	// Notification settings on a block rule.
	NotificationSettings []RuleSettingsNotificationSettingsObservation `json:"notificationSettings,omitempty" tf:"notification_settings,omitempty"`

	// (String) The host to override matching DNS queries with.
	// The host to override matching DNS queries with.
	OverrideHost *string `json:"overrideHost,omitempty" tf:"override_host,omitempty"`

	// (List of String) The IPs to override matching DNS queries with.
	// The IPs to override matching DNS queries with.
	OverrideIps []*string `json:"overrideIps,omitempty" tf:"override_ips,omitempty"`

	// (Block List, Max: 1) Configure DLP Payload Logging settings for this rule. (see below for nested schema)
	// Configure DLP Payload Logging settings for this rule.
	PayloadLog []RuleSettingsPayloadLogObservation `json:"payloadLog,omitempty" tf:"payload_log,omitempty"`

	// (Boolean) Enable sending queries that match the resolver policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when dns_resolvers are specified.
	// Enable sending queries that match the resolver policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when `dns_resolvers` are specified.
	ResolveDNSThroughCloudflare *bool `json:"resolveDnsThroughCloudflare,omitempty" tf:"resolve_dns_through_cloudflare,omitempty"`

	// (Block List, Max: 1) Configure untrusted certificate settings for this rule. (see below for nested schema)
	// Configure untrusted certificate settings for this rule.
	UntrustedCert []UntrustedCertObservation `json:"untrustedCert,omitempty" tf:"untrusted_cert,omitempty"`
}

type RuleSettingsParameters struct {

	// value pairs.
	// Add custom headers to allowed requests in the form of key-value pairs.
	// +kubebuilder:validation:Optional
	AddHeaders map[string]*string `json:"addHeaders,omitempty" tf:"add_headers,omitempty"`

	// (Boolean) Allow parent MSP accounts to enable bypass their children's rules.
	// Allow parent MSP accounts to enable bypass their children's rules.
	// +kubebuilder:validation:Optional
	AllowChildBypass *bool `json:"allowChildBypass,omitempty" tf:"allow_child_bypass,omitempty"`

	// (Block List, Max: 1) Settings for auditing SSH usage. (see below for nested schema)
	// Settings for auditing SSH usage.
	// +kubebuilder:validation:Optional
	AuditSSH []AuditSSHParameters `json:"auditSsh,omitempty" tf:"audit_ssh,omitempty"`

	// (Block List, Max: 1) Configure how browser isolation behaves. (see below for nested schema)
	// Configure how browser isolation behaves.
	// +kubebuilder:validation:Optional
	BisoAdminControls []BisoAdminControlsParameters `json:"bisoAdminControls,omitempty" tf:"biso_admin_controls,omitempty"`

	// (Boolean) Indicator of block page enablement.
	// Indicator of block page enablement.
	// +kubebuilder:validation:Optional
	BlockPageEnabled *bool `json:"blockPageEnabled,omitempty" tf:"block_page_enabled,omitempty"`

	// (String) The displayed reason for a user being blocked.
	// The displayed reason for a user being blocked.
	// +kubebuilder:validation:Optional
	BlockPageReason *string `json:"blockPageReason,omitempty" tf:"block_page_reason,omitempty"`

	// (Boolean) Allow child MSP accounts to bypass their parent's rule.
	// Allow child MSP accounts to bypass their parent's rule.
	// +kubebuilder:validation:Optional
	BypassParentRule *bool `json:"bypassParentRule,omitempty" tf:"bypass_parent_rule,omitempty"`

	// (Block List, Max: 1) Configure how session check behaves. (see below for nested schema)
	// Configure how session check behaves.
	// +kubebuilder:validation:Optional
	CheckSession []CheckSessionParameters `json:"checkSession,omitempty" tf:"check_session,omitempty"`

	// (Block List, Max: 1) Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when resolve_dns_through_cloudflare is set. DNS queries will route to the address closest to their origin. (see below for nested schema)
	// Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when resolve_dns_through_cloudflare is set. DNS queries will route to the address closest to their origin.
	// +kubebuilder:validation:Optional
	DNSResolvers []DNSResolversParameters `json:"dnsResolvers,omitempty" tf:"dns_resolvers,omitempty"`

	// (Block List, Max: 1) Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs. (see below for nested schema)
	// Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs.
	// +kubebuilder:validation:Optional
	Egress []EgressParameters `json:"egress,omitempty" tf:"egress,omitempty"`

	// (Boolean) Turns on IP category based filter on dns if the rule contains dns category checks.
	// Turns on IP category based filter on dns if the rule contains dns category checks.
	// +kubebuilder:validation:Optional
	IPCategories *bool `json:"ipCategories,omitempty" tf:"ip_categories,omitempty"`

	// (Boolean) Disable DNSSEC validation (must be Allow rule).
	// Disable DNSSEC validation (must be Allow rule).
	// +kubebuilder:validation:Optional
	InsecureDisableDNSSECValidation *bool `json:"insecureDisableDnssecValidation,omitempty" tf:"insecure_disable_dnssec_validation,omitempty"`

	// (Block List, Max: 1) Settings to forward layer 4 traffic. (see below for nested schema)
	// Settings to forward layer 4 traffic.
	// +kubebuilder:validation:Optional
	L4Override []L4OverrideParameters `json:"l4override,omitempty" tf:"l4override,omitempty"`

	// (Block List, Max: 1) Notification settings on a block rule. (see below for nested schema)
	// Notification settings on a block rule.
	// +kubebuilder:validation:Optional
	NotificationSettings []RuleSettingsNotificationSettingsParameters `json:"notificationSettings,omitempty" tf:"notification_settings,omitempty"`

	// (String) The host to override matching DNS queries with.
	// The host to override matching DNS queries with.
	// +kubebuilder:validation:Optional
	OverrideHost *string `json:"overrideHost,omitempty" tf:"override_host,omitempty"`

	// (List of String) The IPs to override matching DNS queries with.
	// The IPs to override matching DNS queries with.
	// +kubebuilder:validation:Optional
	OverrideIps []*string `json:"overrideIps,omitempty" tf:"override_ips,omitempty"`

	// (Block List, Max: 1) Configure DLP Payload Logging settings for this rule. (see below for nested schema)
	// Configure DLP Payload Logging settings for this rule.
	// +kubebuilder:validation:Optional
	PayloadLog []RuleSettingsPayloadLogParameters `json:"payloadLog,omitempty" tf:"payload_log,omitempty"`

	// (Boolean) Enable sending queries that match the resolver policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when dns_resolvers are specified.
	// Enable sending queries that match the resolver policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when `dns_resolvers` are specified.
	// +kubebuilder:validation:Optional
	ResolveDNSThroughCloudflare *bool `json:"resolveDnsThroughCloudflare,omitempty" tf:"resolve_dns_through_cloudflare,omitempty"`

	// (Block List, Max: 1) Configure untrusted certificate settings for this rule. (see below for nested schema)
	// Configure untrusted certificate settings for this rule.
	// +kubebuilder:validation:Optional
	UntrustedCert []UntrustedCertParameters `json:"untrustedCert,omitempty" tf:"untrusted_cert,omitempty"`
}

type RuleSettingsPayloadLogInitParameters struct {

	// (Boolean) Indicator of rule enablement.
	// Enable or disable DLP Payload Logging for this rule.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type RuleSettingsPayloadLogObservation struct {

	// (Boolean) Indicator of rule enablement.
	// Enable or disable DLP Payload Logging for this rule.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type RuleSettingsPayloadLogParameters struct {

	// (Boolean) Indicator of rule enablement.
	// Enable or disable DLP Payload Logging for this rule.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`
}

type UntrustedCertInitParameters struct {

	// (String) The action executed by matched teams rule. Available values: allow, block, safesearch, ytrestricted, on, off, scan, noscan, isolate, noisolate, override, l4_override, egress, audit_ssh, resolve.
	// Action to be taken when the SSL certificate of upstream is invalid. Available values: `pass_through`, `block`, `error`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`
}

type UntrustedCertObservation struct {

	// (String) The action executed by matched teams rule. Available values: allow, block, safesearch, ytrestricted, on, off, scan, noscan, isolate, noisolate, override, l4_override, egress, audit_ssh, resolve.
	// Action to be taken when the SSL certificate of upstream is invalid. Available values: `pass_through`, `block`, `error`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`
}

type UntrustedCertParameters struct {

	// (String) The action executed by matched teams rule. Available values: allow, block, safesearch, ytrestricted, on, off, scan, noscan, isolate, noisolate, override, l4_override, egress, audit_ssh, resolve.
	// Action to be taken when the SSL certificate of upstream is invalid. Available values: `pass_through`, `block`, `error`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`
}

// RuleSpec defines the desired state of Rule
type RuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RuleInitParameters `json:"initProvider,omitempty"`
}

// RuleStatus defines the observed state of Rule.
type RuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Rule is the Schema for the Rules API. Provides a Cloudflare Teams rule resource. Teams rules comprise secure web gateway policies.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type Rule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.precedence) || (has(self.initProvider) && has(self.initProvider.precedence))",message="spec.forProvider.precedence is a required parameter"
	Spec   RuleSpec   `json:"spec"`
	Status RuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleList contains a list of Rules
type RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rule `json:"items"`
}

// Repository type metadata.
var (
	Rule_Kind             = "Rule"
	Rule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rule_Kind}.String()
	Rule_KindAPIVersion   = Rule_Kind + "." + CRDGroupVersion.String()
	Rule_GroupVersionKind = CRDGroupVersion.WithKind(Rule_Kind)
)

func init() {
	SchemeBuilder.Register(&Rule{}, &RuleList{})
}
