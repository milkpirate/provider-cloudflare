// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BuildConfigInitParameters struct {

	// (Boolean) Enable build caching for the project.
	// Enable build caching for the project.
	BuildCaching *bool `json:"buildCaching,omitempty" tf:"build_caching,omitempty"`

	// (String) Command used to build project.
	// Command used to build project.
	BuildCommand *string `json:"buildCommand,omitempty" tf:"build_command,omitempty"`

	// (String) Output directory of the build.
	// Output directory of the build.
	DestinationDir *string `json:"destinationDir,omitempty" tf:"destination_dir,omitempty"`

	// (String) Your project's root directory, where Cloudflare runs the build command. If your site is not in a subdirectory, leave this path value empty.
	// Your project's root directory, where Cloudflare runs the build command. If your site is not in a subdirectory, leave this path value empty.
	RootDir *string `json:"rootDir,omitempty" tf:"root_dir,omitempty"`

	// (String) The classifying tag for analytics.
	// The classifying tag for analytics.
	WebAnalyticsTag *string `json:"webAnalyticsTag,omitempty" tf:"web_analytics_tag,omitempty"`

	// (String) The auth token for analytics.
	// The auth token for analytics.
	WebAnalyticsToken *string `json:"webAnalyticsToken,omitempty" tf:"web_analytics_token,omitempty"`
}

type BuildConfigObservation struct {

	// (Boolean) Enable build caching for the project.
	// Enable build caching for the project.
	BuildCaching *bool `json:"buildCaching,omitempty" tf:"build_caching,omitempty"`

	// (String) Command used to build project.
	// Command used to build project.
	BuildCommand *string `json:"buildCommand,omitempty" tf:"build_command,omitempty"`

	// (String) Output directory of the build.
	// Output directory of the build.
	DestinationDir *string `json:"destinationDir,omitempty" tf:"destination_dir,omitempty"`

	// (String) Your project's root directory, where Cloudflare runs the build command. If your site is not in a subdirectory, leave this path value empty.
	// Your project's root directory, where Cloudflare runs the build command. If your site is not in a subdirectory, leave this path value empty.
	RootDir *string `json:"rootDir,omitempty" tf:"root_dir,omitempty"`

	// (String) The classifying tag for analytics.
	// The classifying tag for analytics.
	WebAnalyticsTag *string `json:"webAnalyticsTag,omitempty" tf:"web_analytics_tag,omitempty"`

	// (String) The auth token for analytics.
	// The auth token for analytics.
	WebAnalyticsToken *string `json:"webAnalyticsToken,omitempty" tf:"web_analytics_token,omitempty"`
}

type BuildConfigParameters struct {

	// (Boolean) Enable build caching for the project.
	// Enable build caching for the project.
	// +kubebuilder:validation:Optional
	BuildCaching *bool `json:"buildCaching,omitempty" tf:"build_caching,omitempty"`

	// (String) Command used to build project.
	// Command used to build project.
	// +kubebuilder:validation:Optional
	BuildCommand *string `json:"buildCommand,omitempty" tf:"build_command,omitempty"`

	// (String) Output directory of the build.
	// Output directory of the build.
	// +kubebuilder:validation:Optional
	DestinationDir *string `json:"destinationDir,omitempty" tf:"destination_dir,omitempty"`

	// (String) Your project's root directory, where Cloudflare runs the build command. If your site is not in a subdirectory, leave this path value empty.
	// Your project's root directory, where Cloudflare runs the build command. If your site is not in a subdirectory, leave this path value empty.
	// +kubebuilder:validation:Optional
	RootDir *string `json:"rootDir,omitempty" tf:"root_dir,omitempty"`

	// (String) The classifying tag for analytics.
	// The classifying tag for analytics.
	// +kubebuilder:validation:Optional
	WebAnalyticsTag *string `json:"webAnalyticsTag,omitempty" tf:"web_analytics_tag,omitempty"`

	// (String) The auth token for analytics.
	// The auth token for analytics.
	// +kubebuilder:validation:Optional
	WebAnalyticsToken *string `json:"webAnalyticsToken,omitempty" tf:"web_analytics_token,omitempty"`
}

type ConfigInitParameters struct {

	// (Boolean) Toggle deployments on this repo. Defaults to true.
	// Toggle deployments on this repo. Defaults to `true`.
	DeploymentsEnabled *bool `json:"deploymentsEnabled,omitempty" tf:"deployments_enabled,omitempty"`

	// (String) Project owner username. Modifying this attribute will force creation of a new resource.
	// Project owner username. **Modifying this attribute will force creation of a new resource.**
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Boolean) Enable Pages to comment on Pull Requests. Defaults to true.
	// Enable Pages to comment on Pull Requests. Defaults to `true`.
	PrCommentsEnabled *bool `json:"prCommentsEnabled,omitempty" tf:"pr_comments_enabled,omitempty"`

	// (List of String) Branches will be excluded from automatic deployment.
	// Branches will be excluded from automatic deployment.
	PreviewBranchExcludes []*string `json:"previewBranchExcludes,omitempty" tf:"preview_branch_excludes,omitempty"`

	// (List of String) Branches will be included for automatic deployment.
	// Branches will be included for automatic deployment.
	PreviewBranchIncludes []*string `json:"previewBranchIncludes,omitempty" tf:"preview_branch_includes,omitempty"`

	// (String) Preview Deployment Setting. Available values: custom, all, none. Defaults to all.
	// Preview Deployment Setting. Available values: `custom`, `all`, `none`. Defaults to `all`.
	PreviewDeploymentSetting *string `json:"previewDeploymentSetting,omitempty" tf:"preview_deployment_setting,omitempty"`

	// (String) The name of the branch that is used for the production environment.
	// Project production branch name.
	ProductionBranch *string `json:"productionBranch,omitempty" tf:"production_branch,omitempty"`

	// (Boolean) Enable production deployments. Defaults to true.
	// Enable production deployments. Defaults to `true`.
	ProductionDeploymentEnabled *bool `json:"productionDeploymentEnabled,omitempty" tf:"production_deployment_enabled,omitempty"`

	// (String) Project repository name. Modifying this attribute will force creation of a new resource.
	// Project repository name. **Modifying this attribute will force creation of a new resource.**
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`
}

type ConfigObservation struct {

	// (Boolean) Toggle deployments on this repo. Defaults to true.
	// Toggle deployments on this repo. Defaults to `true`.
	DeploymentsEnabled *bool `json:"deploymentsEnabled,omitempty" tf:"deployments_enabled,omitempty"`

	// (String) Project owner username. Modifying this attribute will force creation of a new resource.
	// Project owner username. **Modifying this attribute will force creation of a new resource.**
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Boolean) Enable Pages to comment on Pull Requests. Defaults to true.
	// Enable Pages to comment on Pull Requests. Defaults to `true`.
	PrCommentsEnabled *bool `json:"prCommentsEnabled,omitempty" tf:"pr_comments_enabled,omitempty"`

	// (List of String) Branches will be excluded from automatic deployment.
	// Branches will be excluded from automatic deployment.
	PreviewBranchExcludes []*string `json:"previewBranchExcludes,omitempty" tf:"preview_branch_excludes,omitempty"`

	// (List of String) Branches will be included for automatic deployment.
	// Branches will be included for automatic deployment.
	PreviewBranchIncludes []*string `json:"previewBranchIncludes,omitempty" tf:"preview_branch_includes,omitempty"`

	// (String) Preview Deployment Setting. Available values: custom, all, none. Defaults to all.
	// Preview Deployment Setting. Available values: `custom`, `all`, `none`. Defaults to `all`.
	PreviewDeploymentSetting *string `json:"previewDeploymentSetting,omitempty" tf:"preview_deployment_setting,omitempty"`

	// (String) The name of the branch that is used for the production environment.
	// Project production branch name.
	ProductionBranch *string `json:"productionBranch,omitempty" tf:"production_branch,omitempty"`

	// (Boolean) Enable production deployments. Defaults to true.
	// Enable production deployments. Defaults to `true`.
	ProductionDeploymentEnabled *bool `json:"productionDeploymentEnabled,omitempty" tf:"production_deployment_enabled,omitempty"`

	// (String) Project repository name. Modifying this attribute will force creation of a new resource.
	// Project repository name. **Modifying this attribute will force creation of a new resource.**
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`
}

type ConfigParameters struct {

	// (Boolean) Toggle deployments on this repo. Defaults to true.
	// Toggle deployments on this repo. Defaults to `true`.
	// +kubebuilder:validation:Optional
	DeploymentsEnabled *bool `json:"deploymentsEnabled,omitempty" tf:"deployments_enabled,omitempty"`

	// (String) Project owner username. Modifying this attribute will force creation of a new resource.
	// Project owner username. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Boolean) Enable Pages to comment on Pull Requests. Defaults to true.
	// Enable Pages to comment on Pull Requests. Defaults to `true`.
	// +kubebuilder:validation:Optional
	PrCommentsEnabled *bool `json:"prCommentsEnabled,omitempty" tf:"pr_comments_enabled,omitempty"`

	// (List of String) Branches will be excluded from automatic deployment.
	// Branches will be excluded from automatic deployment.
	// +kubebuilder:validation:Optional
	PreviewBranchExcludes []*string `json:"previewBranchExcludes,omitempty" tf:"preview_branch_excludes,omitempty"`

	// (List of String) Branches will be included for automatic deployment.
	// Branches will be included for automatic deployment.
	// +kubebuilder:validation:Optional
	PreviewBranchIncludes []*string `json:"previewBranchIncludes,omitempty" tf:"preview_branch_includes,omitempty"`

	// (String) Preview Deployment Setting. Available values: custom, all, none. Defaults to all.
	// Preview Deployment Setting. Available values: `custom`, `all`, `none`. Defaults to `all`.
	// +kubebuilder:validation:Optional
	PreviewDeploymentSetting *string `json:"previewDeploymentSetting,omitempty" tf:"preview_deployment_setting,omitempty"`

	// (String) The name of the branch that is used for the production environment.
	// Project production branch name.
	// +kubebuilder:validation:Optional
	ProductionBranch *string `json:"productionBranch" tf:"production_branch,omitempty"`

	// (Boolean) Enable production deployments. Defaults to true.
	// Enable production deployments. Defaults to `true`.
	// +kubebuilder:validation:Optional
	ProductionDeploymentEnabled *bool `json:"productionDeploymentEnabled,omitempty" tf:"production_deployment_enabled,omitempty"`

	// (String) Project repository name. Modifying this attribute will force creation of a new resource.
	// Project repository name. **Modifying this attribute will force creation of a new resource.**
	// +kubebuilder:validation:Optional
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`
}

type DeploymentConfigsInitParameters struct {

	// (Block List, Max: 1) Configuration for preview deploys. (see below for nested schema)
	// Configuration for preview deploys.
	Preview []PreviewInitParameters `json:"preview,omitempty" tf:"preview,omitempty"`

	// (Block List, Max: 1) Configuration for production deploys. (see below for nested schema)
	// Configuration for production deploys.
	Production []ProductionInitParameters `json:"production,omitempty" tf:"production,omitempty"`
}

type DeploymentConfigsObservation struct {

	// (Block List, Max: 1) Configuration for preview deploys. (see below for nested schema)
	// Configuration for preview deploys.
	Preview []PreviewObservation `json:"preview,omitempty" tf:"preview,omitempty"`

	// (Block List, Max: 1) Configuration for production deploys. (see below for nested schema)
	// Configuration for production deploys.
	Production []ProductionObservation `json:"production,omitempty" tf:"production,omitempty"`
}

type DeploymentConfigsParameters struct {

	// (Block List, Max: 1) Configuration for preview deploys. (see below for nested schema)
	// Configuration for preview deploys.
	// +kubebuilder:validation:Optional
	Preview []PreviewParameters `json:"preview,omitempty" tf:"preview,omitempty"`

	// (Block List, Max: 1) Configuration for production deploys. (see below for nested schema)
	// Configuration for production deploys.
	// +kubebuilder:validation:Optional
	Production []ProductionParameters `json:"production,omitempty" tf:"production,omitempty"`
}

type PlacementInitParameters struct {

	// (String) Placement Mode for the Pages Function.
	// Placement Mode for the Pages Function.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type PlacementObservation struct {

	// (String) Placement Mode for the Pages Function.
	// Placement Mode for the Pages Function.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type PlacementParameters struct {

	// (String) Placement Mode for the Pages Function.
	// Placement Mode for the Pages Function.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type PreviewInitParameters struct {

	// (Boolean) Use latest compatibility date for Pages Functions. Defaults to false.
	// Use latest compatibility date for Pages Functions. Defaults to `false`.
	AlwaysUseLatestCompatibilityDate *bool `json:"alwaysUseLatestCompatibilityDate,omitempty" tf:"always_use_latest_compatibility_date,omitempty"`

	// (String) Compatibility date used for Pages Functions.
	// Compatibility date used for Pages Functions.
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Compatibility flags used for Pages Functions.
	// Compatibility flags used for Pages Functions.
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (Map of String) D1 Databases used for Pages Functions. Defaults to map[].
	// D1 Databases used for Pages Functions. Defaults to `map[]`.
	D1Databases map[string]*string `json:"d1Databases,omitempty" tf:"d1_databases,omitempty"`

	// (Map of String) Durable Object namespaces used for Pages Functions. Defaults to map[].
	// Durable Object namespaces used for Pages Functions. Defaults to `map[]`.
	DurableObjectNamespaces map[string]*string `json:"durableObjectNamespaces,omitempty" tf:"durable_object_namespaces,omitempty"`

	// (Map of String) Environment variables for Pages Functions. Defaults to map[].
	// Environment variables for Pages Functions. Defaults to `map[]`.
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// (Boolean) Fail open used for Pages Functions. Defaults to false.
	// Fail open used for Pages Functions. Defaults to `false`.
	FailOpen *bool `json:"failOpen,omitempty" tf:"fail_open,omitempty"`

	// (Map of String) KV namespaces used for Pages Functions. Defaults to map[].
	// KV namespaces used for Pages Functions. Defaults to `map[]`.
	KvNamespaces map[string]*string `json:"kvNamespaces,omitempty" tf:"kv_namespaces,omitempty"`

	// (Block List, Max: 1) Configuration for placement in the Cloudflare Pages project. (see below for nested schema)
	// Configuration for placement in the Cloudflare Pages project.
	Placement []PlacementInitParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Map of String) R2 Buckets used for Pages Functions. Defaults to map[].
	// R2 Buckets used for Pages Functions. Defaults to `map[]`.
	R2Buckets map[string]*string `json:"r2Buckets,omitempty" tf:"r2_buckets,omitempty"`

	// (Block Set) Services used for Pages Functions. (see below for nested schema)
	// Services used for Pages Functions.
	ServiceBinding []ServiceBindingInitParameters `json:"serviceBinding,omitempty" tf:"service_binding,omitempty"`

	// (String) Usage model used for Pages Functions. Available values: unbound, bundled, standard. Defaults to bundled.
	// Usage model used for Pages Functions. Available values: `unbound`, `bundled`, `standard`. Defaults to `bundled`.
	UsageModel *string `json:"usageModel,omitempty" tf:"usage_model,omitempty"`
}

type PreviewObservation struct {

	// (Boolean) Use latest compatibility date for Pages Functions. Defaults to false.
	// Use latest compatibility date for Pages Functions. Defaults to `false`.
	AlwaysUseLatestCompatibilityDate *bool `json:"alwaysUseLatestCompatibilityDate,omitempty" tf:"always_use_latest_compatibility_date,omitempty"`

	// (String) Compatibility date used for Pages Functions.
	// Compatibility date used for Pages Functions.
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Compatibility flags used for Pages Functions.
	// Compatibility flags used for Pages Functions.
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (Map of String) D1 Databases used for Pages Functions. Defaults to map[].
	// D1 Databases used for Pages Functions. Defaults to `map[]`.
	D1Databases map[string]*string `json:"d1Databases,omitempty" tf:"d1_databases,omitempty"`

	// (Map of String) Durable Object namespaces used for Pages Functions. Defaults to map[].
	// Durable Object namespaces used for Pages Functions. Defaults to `map[]`.
	DurableObjectNamespaces map[string]*string `json:"durableObjectNamespaces,omitempty" tf:"durable_object_namespaces,omitempty"`

	// (Map of String) Environment variables for Pages Functions. Defaults to map[].
	// Environment variables for Pages Functions. Defaults to `map[]`.
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// (Boolean) Fail open used for Pages Functions. Defaults to false.
	// Fail open used for Pages Functions. Defaults to `false`.
	FailOpen *bool `json:"failOpen,omitempty" tf:"fail_open,omitempty"`

	// (Map of String) KV namespaces used for Pages Functions. Defaults to map[].
	// KV namespaces used for Pages Functions. Defaults to `map[]`.
	KvNamespaces map[string]*string `json:"kvNamespaces,omitempty" tf:"kv_namespaces,omitempty"`

	// (Block List, Max: 1) Configuration for placement in the Cloudflare Pages project. (see below for nested schema)
	// Configuration for placement in the Cloudflare Pages project.
	Placement []PlacementObservation `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Map of String) R2 Buckets used for Pages Functions. Defaults to map[].
	// R2 Buckets used for Pages Functions. Defaults to `map[]`.
	R2Buckets map[string]*string `json:"r2Buckets,omitempty" tf:"r2_buckets,omitempty"`

	// (Block Set) Services used for Pages Functions. (see below for nested schema)
	// Services used for Pages Functions.
	ServiceBinding []ServiceBindingObservation `json:"serviceBinding,omitempty" tf:"service_binding,omitempty"`

	// (String) Usage model used for Pages Functions. Available values: unbound, bundled, standard. Defaults to bundled.
	// Usage model used for Pages Functions. Available values: `unbound`, `bundled`, `standard`. Defaults to `bundled`.
	UsageModel *string `json:"usageModel,omitempty" tf:"usage_model,omitempty"`
}

type PreviewParameters struct {

	// (Boolean) Use latest compatibility date for Pages Functions. Defaults to false.
	// Use latest compatibility date for Pages Functions. Defaults to `false`.
	// +kubebuilder:validation:Optional
	AlwaysUseLatestCompatibilityDate *bool `json:"alwaysUseLatestCompatibilityDate,omitempty" tf:"always_use_latest_compatibility_date,omitempty"`

	// (String) Compatibility date used for Pages Functions.
	// Compatibility date used for Pages Functions.
	// +kubebuilder:validation:Optional
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Compatibility flags used for Pages Functions.
	// Compatibility flags used for Pages Functions.
	// +kubebuilder:validation:Optional
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (Map of String) D1 Databases used for Pages Functions. Defaults to map[].
	// D1 Databases used for Pages Functions. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	D1Databases map[string]*string `json:"d1Databases,omitempty" tf:"d1_databases,omitempty"`

	// (Map of String) Durable Object namespaces used for Pages Functions. Defaults to map[].
	// Durable Object namespaces used for Pages Functions. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	DurableObjectNamespaces map[string]*string `json:"durableObjectNamespaces,omitempty" tf:"durable_object_namespaces,omitempty"`

	// (Map of String) Environment variables for Pages Functions. Defaults to map[].
	// Environment variables for Pages Functions. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// (Boolean) Fail open used for Pages Functions. Defaults to false.
	// Fail open used for Pages Functions. Defaults to `false`.
	// +kubebuilder:validation:Optional
	FailOpen *bool `json:"failOpen,omitempty" tf:"fail_open,omitempty"`

	// (Map of String) KV namespaces used for Pages Functions. Defaults to map[].
	// KV namespaces used for Pages Functions. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	KvNamespaces map[string]*string `json:"kvNamespaces,omitempty" tf:"kv_namespaces,omitempty"`

	// (Block List, Max: 1) Configuration for placement in the Cloudflare Pages project. (see below for nested schema)
	// Configuration for placement in the Cloudflare Pages project.
	// +kubebuilder:validation:Optional
	Placement []PlacementParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Map of String) R2 Buckets used for Pages Functions. Defaults to map[].
	// R2 Buckets used for Pages Functions. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	R2Buckets map[string]*string `json:"r2Buckets,omitempty" tf:"r2_buckets,omitempty"`

	// (Map of String, Sensitive) Encrypted environment variables for Pages Functions. Defaults to map[].
	// Encrypted environment variables for Pages Functions. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	SecretsSecretRef *v1.SecretReference `json:"secretsSecretRef,omitempty" tf:"-"`

	// (Block Set) Services used for Pages Functions. (see below for nested schema)
	// Services used for Pages Functions.
	// +kubebuilder:validation:Optional
	ServiceBinding []ServiceBindingParameters `json:"serviceBinding,omitempty" tf:"service_binding,omitempty"`

	// (String) Usage model used for Pages Functions. Available values: unbound, bundled, standard. Defaults to bundled.
	// Usage model used for Pages Functions. Available values: `unbound`, `bundled`, `standard`. Defaults to `bundled`.
	// +kubebuilder:validation:Optional
	UsageModel *string `json:"usageModel,omitempty" tf:"usage_model,omitempty"`
}

type ProductionInitParameters struct {

	// (Boolean) Use latest compatibility date for Pages Functions. Defaults to false.
	// Use latest compatibility date for Pages Functions. Defaults to `false`.
	AlwaysUseLatestCompatibilityDate *bool `json:"alwaysUseLatestCompatibilityDate,omitempty" tf:"always_use_latest_compatibility_date,omitempty"`

	// (String) Compatibility date used for Pages Functions.
	// Compatibility date used for Pages Functions.
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Compatibility flags used for Pages Functions.
	// Compatibility flags used for Pages Functions.
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (Map of String) D1 Databases used for Pages Functions. Defaults to map[].
	// D1 Databases used for Pages Functions. Defaults to `map[]`.
	D1Databases map[string]*string `json:"d1Databases,omitempty" tf:"d1_databases,omitempty"`

	// (Map of String) Durable Object namespaces used for Pages Functions. Defaults to map[].
	// Durable Object namespaces used for Pages Functions. Defaults to `map[]`.
	DurableObjectNamespaces map[string]*string `json:"durableObjectNamespaces,omitempty" tf:"durable_object_namespaces,omitempty"`

	// (Map of String) Environment variables for Pages Functions. Defaults to map[].
	// Environment variables for Pages Functions. Defaults to `map[]`.
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// (Boolean) Fail open used for Pages Functions. Defaults to false.
	// Fail open used for Pages Functions. Defaults to `false`.
	FailOpen *bool `json:"failOpen,omitempty" tf:"fail_open,omitempty"`

	// (Map of String) KV namespaces used for Pages Functions. Defaults to map[].
	// KV namespaces used for Pages Functions. Defaults to `map[]`.
	KvNamespaces map[string]*string `json:"kvNamespaces,omitempty" tf:"kv_namespaces,omitempty"`

	// (Block List, Max: 1) Configuration for placement in the Cloudflare Pages project. (see below for nested schema)
	// Configuration for placement in the Cloudflare Pages project.
	Placement []ProductionPlacementInitParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Map of String) R2 Buckets used for Pages Functions. Defaults to map[].
	// R2 Buckets used for Pages Functions. Defaults to `map[]`.
	R2Buckets map[string]*string `json:"r2Buckets,omitempty" tf:"r2_buckets,omitempty"`

	// (Block Set) Services used for Pages Functions. (see below for nested schema)
	// Services used for Pages Functions.
	ServiceBinding []ProductionServiceBindingInitParameters `json:"serviceBinding,omitempty" tf:"service_binding,omitempty"`

	// (String) Usage model used for Pages Functions. Available values: unbound, bundled, standard. Defaults to bundled.
	// Usage model used for Pages Functions. Available values: `unbound`, `bundled`, `standard`. Defaults to `bundled`.
	UsageModel *string `json:"usageModel,omitempty" tf:"usage_model,omitempty"`
}

type ProductionObservation struct {

	// (Boolean) Use latest compatibility date for Pages Functions. Defaults to false.
	// Use latest compatibility date for Pages Functions. Defaults to `false`.
	AlwaysUseLatestCompatibilityDate *bool `json:"alwaysUseLatestCompatibilityDate,omitempty" tf:"always_use_latest_compatibility_date,omitempty"`

	// (String) Compatibility date used for Pages Functions.
	// Compatibility date used for Pages Functions.
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Compatibility flags used for Pages Functions.
	// Compatibility flags used for Pages Functions.
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (Map of String) D1 Databases used for Pages Functions. Defaults to map[].
	// D1 Databases used for Pages Functions. Defaults to `map[]`.
	D1Databases map[string]*string `json:"d1Databases,omitempty" tf:"d1_databases,omitempty"`

	// (Map of String) Durable Object namespaces used for Pages Functions. Defaults to map[].
	// Durable Object namespaces used for Pages Functions. Defaults to `map[]`.
	DurableObjectNamespaces map[string]*string `json:"durableObjectNamespaces,omitempty" tf:"durable_object_namespaces,omitempty"`

	// (Map of String) Environment variables for Pages Functions. Defaults to map[].
	// Environment variables for Pages Functions. Defaults to `map[]`.
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// (Boolean) Fail open used for Pages Functions. Defaults to false.
	// Fail open used for Pages Functions. Defaults to `false`.
	FailOpen *bool `json:"failOpen,omitempty" tf:"fail_open,omitempty"`

	// (Map of String) KV namespaces used for Pages Functions. Defaults to map[].
	// KV namespaces used for Pages Functions. Defaults to `map[]`.
	KvNamespaces map[string]*string `json:"kvNamespaces,omitempty" tf:"kv_namespaces,omitempty"`

	// (Block List, Max: 1) Configuration for placement in the Cloudflare Pages project. (see below for nested schema)
	// Configuration for placement in the Cloudflare Pages project.
	Placement []ProductionPlacementObservation `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Map of String) R2 Buckets used for Pages Functions. Defaults to map[].
	// R2 Buckets used for Pages Functions. Defaults to `map[]`.
	R2Buckets map[string]*string `json:"r2Buckets,omitempty" tf:"r2_buckets,omitempty"`

	// (Block Set) Services used for Pages Functions. (see below for nested schema)
	// Services used for Pages Functions.
	ServiceBinding []ProductionServiceBindingObservation `json:"serviceBinding,omitempty" tf:"service_binding,omitempty"`

	// (String) Usage model used for Pages Functions. Available values: unbound, bundled, standard. Defaults to bundled.
	// Usage model used for Pages Functions. Available values: `unbound`, `bundled`, `standard`. Defaults to `bundled`.
	UsageModel *string `json:"usageModel,omitempty" tf:"usage_model,omitempty"`
}

type ProductionParameters struct {

	// (Boolean) Use latest compatibility date for Pages Functions. Defaults to false.
	// Use latest compatibility date for Pages Functions. Defaults to `false`.
	// +kubebuilder:validation:Optional
	AlwaysUseLatestCompatibilityDate *bool `json:"alwaysUseLatestCompatibilityDate,omitempty" tf:"always_use_latest_compatibility_date,omitempty"`

	// (String) Compatibility date used for Pages Functions.
	// Compatibility date used for Pages Functions.
	// +kubebuilder:validation:Optional
	CompatibilityDate *string `json:"compatibilityDate,omitempty" tf:"compatibility_date,omitempty"`

	// (List of String) Compatibility flags used for Pages Functions.
	// Compatibility flags used for Pages Functions.
	// +kubebuilder:validation:Optional
	CompatibilityFlags []*string `json:"compatibilityFlags,omitempty" tf:"compatibility_flags,omitempty"`

	// (Map of String) D1 Databases used for Pages Functions. Defaults to map[].
	// D1 Databases used for Pages Functions. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	D1Databases map[string]*string `json:"d1Databases,omitempty" tf:"d1_databases,omitempty"`

	// (Map of String) Durable Object namespaces used for Pages Functions. Defaults to map[].
	// Durable Object namespaces used for Pages Functions. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	DurableObjectNamespaces map[string]*string `json:"durableObjectNamespaces,omitempty" tf:"durable_object_namespaces,omitempty"`

	// (Map of String) Environment variables for Pages Functions. Defaults to map[].
	// Environment variables for Pages Functions. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// (Boolean) Fail open used for Pages Functions. Defaults to false.
	// Fail open used for Pages Functions. Defaults to `false`.
	// +kubebuilder:validation:Optional
	FailOpen *bool `json:"failOpen,omitempty" tf:"fail_open,omitempty"`

	// (Map of String) KV namespaces used for Pages Functions. Defaults to map[].
	// KV namespaces used for Pages Functions. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	KvNamespaces map[string]*string `json:"kvNamespaces,omitempty" tf:"kv_namespaces,omitempty"`

	// (Block List, Max: 1) Configuration for placement in the Cloudflare Pages project. (see below for nested schema)
	// Configuration for placement in the Cloudflare Pages project.
	// +kubebuilder:validation:Optional
	Placement []ProductionPlacementParameters `json:"placement,omitempty" tf:"placement,omitempty"`

	// (Map of String) R2 Buckets used for Pages Functions. Defaults to map[].
	// R2 Buckets used for Pages Functions. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	R2Buckets map[string]*string `json:"r2Buckets,omitempty" tf:"r2_buckets,omitempty"`

	// (Map of String, Sensitive) Encrypted environment variables for Pages Functions. Defaults to map[].
	// Encrypted environment variables for Pages Functions. Defaults to `map[]`.
	// +kubebuilder:validation:Optional
	SecretsSecretRef *v1.SecretReference `json:"secretsSecretRef,omitempty" tf:"-"`

	// (Block Set) Services used for Pages Functions. (see below for nested schema)
	// Services used for Pages Functions.
	// +kubebuilder:validation:Optional
	ServiceBinding []ProductionServiceBindingParameters `json:"serviceBinding,omitempty" tf:"service_binding,omitempty"`

	// (String) Usage model used for Pages Functions. Available values: unbound, bundled, standard. Defaults to bundled.
	// Usage model used for Pages Functions. Available values: `unbound`, `bundled`, `standard`. Defaults to `bundled`.
	// +kubebuilder:validation:Optional
	UsageModel *string `json:"usageModel,omitempty" tf:"usage_model,omitempty"`
}

type ProductionPlacementInitParameters struct {

	// (String) Placement Mode for the Pages Function.
	// Placement Mode for the Pages Function.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type ProductionPlacementObservation struct {

	// (String) Placement Mode for the Pages Function.
	// Placement Mode for the Pages Function.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type ProductionPlacementParameters struct {

	// (String) Placement Mode for the Pages Function.
	// Placement Mode for the Pages Function.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type ProductionServiceBindingInitParameters struct {

	// (String) The name of the Worker environment to bind to.
	// The name of the Worker environment to bind to.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of the project.
	// The global variable for the binding in your Worker code.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the Worker to bind to.
	// The name of the Worker to bind to.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ProductionServiceBindingObservation struct {

	// (String) The name of the Worker environment to bind to.
	// The name of the Worker environment to bind to.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of the project.
	// The global variable for the binding in your Worker code.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the Worker to bind to.
	// The name of the Worker to bind to.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ProductionServiceBindingParameters struct {

	// (String) The name of the Worker environment to bind to.
	// The name of the Worker environment to bind to.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of the project.
	// The global variable for the binding in your Worker code.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The name of the Worker to bind to.
	// The name of the Worker to bind to.
	// +kubebuilder:validation:Optional
	Service *string `json:"service" tf:"service,omitempty"`
}

type ProjectInitParameters struct {

	// (Block List, Max: 1) Configuration for the project build process. Read more about the build configuration in the developer documentation. (see below for nested schema)
	// Configuration for the project build process. Read more about the build configuration in the [developer documentation](https://developers.cloudflare.com/pages/platform/build-configuration).
	BuildConfig []BuildConfigInitParameters `json:"buildConfig,omitempty" tf:"build_config,omitempty"`

	// (Block List, Max: 1) Configuration for deployments in a project. (see below for nested schema)
	// Configuration for deployments in a project.
	DeploymentConfigs []DeploymentConfigsInitParameters `json:"deploymentConfigs,omitempty" tf:"deployment_configs,omitempty"`

	// (String) Name of the project.
	// Name of the project.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the branch that is used for the production environment.
	// The name of the branch that is used for the production environment.
	ProductionBranch *string `json:"productionBranch,omitempty" tf:"production_branch,omitempty"`

	// (Block List, Max: 1) Configuration for the project source. Read more about the source configuration in the developer documentation. (see below for nested schema)
	// Configuration for the project source. Read more about the source configuration in the [developer documentation](https://developers.cloudflare.com/pages/platform/branch-build-controls/).
	Source []SourceInitParameters `json:"source,omitempty" tf:"source,omitempty"`
}

type ProjectObservation struct {

	// (String) The account identifier to target for the resource.
	// The account identifier to target for the resource.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// (Block List, Max: 1) Configuration for the project build process. Read more about the build configuration in the developer documentation. (see below for nested schema)
	// Configuration for the project build process. Read more about the build configuration in the [developer documentation](https://developers.cloudflare.com/pages/platform/build-configuration).
	BuildConfig []BuildConfigObservation `json:"buildConfig,omitempty" tf:"build_config,omitempty"`

	// (String) When the project was created.
	// When the project was created.
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (Block List, Max: 1) Configuration for deployments in a project. (see below for nested schema)
	// Configuration for deployments in a project.
	DeploymentConfigs []DeploymentConfigsObservation `json:"deploymentConfigs,omitempty" tf:"deployment_configs,omitempty"`

	// (List of String) A list of associated custom domains for the project.
	// A list of associated custom domains for the project.
	Domains []*string `json:"domains,omitempty" tf:"domains,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the project.
	// Name of the project.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the branch that is used for the production environment.
	// The name of the branch that is used for the production environment.
	ProductionBranch *string `json:"productionBranch,omitempty" tf:"production_branch,omitempty"`

	// (Block List, Max: 1) Configuration for the project source. Read more about the source configuration in the developer documentation. (see below for nested schema)
	// Configuration for the project source. Read more about the source configuration in the [developer documentation](https://developers.cloudflare.com/pages/platform/branch-build-controls/).
	Source []SourceObservation `json:"source,omitempty" tf:"source,omitempty"`

	// (String) The Cloudflare subdomain associated with the project.
	// The Cloudflare subdomain associated with the project.
	Subdomain *string `json:"subdomain,omitempty" tf:"subdomain,omitempty"`
}

type ProjectParameters struct {

	// (String) The account identifier to target for the resource.
	// The account identifier to target for the resource.
	// +crossplane:generate:reference:type=github.com/milkpirate/provider-cloudflare/apis/account/v1alpha1.Account
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Reference to a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDRef *v1.Reference `json:"accountIdRef,omitempty" tf:"-"`

	// Selector for a Account in account to populate accountId.
	// +kubebuilder:validation:Optional
	AccountIDSelector *v1.Selector `json:"accountIdSelector,omitempty" tf:"-"`

	// (Block List, Max: 1) Configuration for the project build process. Read more about the build configuration in the developer documentation. (see below for nested schema)
	// Configuration for the project build process. Read more about the build configuration in the [developer documentation](https://developers.cloudflare.com/pages/platform/build-configuration).
	// +kubebuilder:validation:Optional
	BuildConfig []BuildConfigParameters `json:"buildConfig,omitempty" tf:"build_config,omitempty"`

	// (Block List, Max: 1) Configuration for deployments in a project. (see below for nested schema)
	// Configuration for deployments in a project.
	// +kubebuilder:validation:Optional
	DeploymentConfigs []DeploymentConfigsParameters `json:"deploymentConfigs,omitempty" tf:"deployment_configs,omitempty"`

	// (String) Name of the project.
	// Name of the project.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the branch that is used for the production environment.
	// The name of the branch that is used for the production environment.
	// +kubebuilder:validation:Optional
	ProductionBranch *string `json:"productionBranch,omitempty" tf:"production_branch,omitempty"`

	// (Block List, Max: 1) Configuration for the project source. Read more about the source configuration in the developer documentation. (see below for nested schema)
	// Configuration for the project source. Read more about the source configuration in the [developer documentation](https://developers.cloudflare.com/pages/platform/branch-build-controls/).
	// +kubebuilder:validation:Optional
	Source []SourceParameters `json:"source,omitempty" tf:"source,omitempty"`
}

type ServiceBindingInitParameters struct {

	// (String) The name of the Worker environment to bind to.
	// The name of the Worker environment to bind to.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of the project.
	// The global variable for the binding in your Worker code.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the Worker to bind to.
	// The name of the Worker to bind to.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ServiceBindingObservation struct {

	// (String) The name of the Worker environment to bind to.
	// The name of the Worker environment to bind to.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of the project.
	// The global variable for the binding in your Worker code.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The name of the Worker to bind to.
	// The name of the Worker to bind to.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`
}

type ServiceBindingParameters struct {

	// (String) The name of the Worker environment to bind to.
	// The name of the Worker environment to bind to.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Name of the project.
	// The global variable for the binding in your Worker code.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The name of the Worker to bind to.
	// The name of the Worker to bind to.
	// +kubebuilder:validation:Optional
	Service *string `json:"service" tf:"service,omitempty"`
}

type SourceInitParameters struct {

	// (Block List, Max: 1) Configuration for the source of the Cloudflare Pages project. (see below for nested schema)
	// Configuration for the source of the Cloudflare Pages project.
	Config []ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// (String) Project host type.
	// Project host type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceObservation struct {

	// (Block List, Max: 1) Configuration for the source of the Cloudflare Pages project. (see below for nested schema)
	// Configuration for the source of the Cloudflare Pages project.
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// (String) Project host type.
	// Project host type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceParameters struct {

	// (Block List, Max: 1) Configuration for the source of the Cloudflare Pages project. (see below for nested schema)
	// Configuration for the source of the Cloudflare Pages project.
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// (String) Project host type.
	// Project host type.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ProjectSpec defines the desired state of Project
type ProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectInitParameters `json:"initProvider,omitempty"`
}

// ProjectStatus defines the observed state of Project.
type ProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Project is the Schema for the Projects API. Provides a resource which manages Cloudflare Pages projects.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type Project struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.productionBranch) || (has(self.initProvider) && has(self.initProvider.productionBranch))",message="spec.forProvider.productionBranch is a required parameter"
	Spec   ProjectSpec   `json:"spec"`
	Status ProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectList contains a list of Projects
type ProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Project `json:"items"`
}

// Repository type metadata.
var (
	Project_Kind             = "Project"
	Project_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Project_Kind}.String()
	Project_KindAPIVersion   = Project_Kind + "." + CRDGroupVersion.String()
	Project_GroupVersionKind = CRDGroupVersion.WithKind(Project_Kind)
)

func init() {
	SchemeBuilder.Register(&Project{}, &ProjectList{})
}
